{"file":"C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\src\\utils\\generateSecurePassword.ts","mappings":";;;;;;AAAA,oDAA4B;AAGrB,MAAM,sBAAsB,GAAG,GAAG,EAAE;IACvC,OAAO,gBAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;SAC1C,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;SACrB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;SACZ,OAAO,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CACjC,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAClD,CAAC;AACN,CAAC,CAAC;AAPW,QAAA,sBAAsB,0BAOjC","names":[],"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\src\\utils\\generateSecurePassword.ts"],"sourcesContent":["import crypto from 'crypto';\r\n\r\n\r\nexport const generateSecurePassword = () => {\r\n    return crypto.randomBytes(9).toString('base64') \r\n        .replace(/[+/=]/g, '') \r\n        .slice(0, 12) \r\n        .replace(/([a-z])/g, (char, index) => \r\n            index % 2 === 0 ? char.toUpperCase() : char\r\n    );\r\n};\r\n"],"version":3}