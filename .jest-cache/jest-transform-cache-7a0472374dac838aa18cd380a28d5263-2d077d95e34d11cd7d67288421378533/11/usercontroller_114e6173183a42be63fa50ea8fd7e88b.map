{"version":3,"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\src\\controllers\\user.controller.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport bcrypt from \"bcrypt\";\r\nimport { User } from \"../models/user.model\";\r\nimport { throwError } from '../utils/error';\r\nimport { CustomRequest } from '../interfaces/customRequest';\r\nimport { checkId } from '../utils/checkId';\r\nimport { Adventure } from '../models/adventure.model';\r\nimport { IAdventureProgress } from '../interfaces/IAdventureProgress';\r\nimport { Family } from '../models/family.model';\r\nimport { recalculateFamilyMemberRanks } from '../utils/recalculateFamilyMemberRanks';\r\nimport nodemailer from \"nodemailer\";\r\nimport { sendMail } from '../services/email.service';\r\nimport { generateSecurePassword } from '../utils/generateSecurePassword';\r\n\r\n// API to get all users\r\nexport const getUsers = async(req: Request, res: Response): Promise<void> => {\r\n    try{\r\n        const users = await User.find();\r\n        res.status(200).send(users);\r\n    }catch(error){\r\n        return throwError({ message: \"Error retrieving users\", res, status: 500});\r\n    }\r\n};\r\n\r\n// API to get a user based on his Id\r\nexport const getUserById = async (req: CustomRequest, res: Response): Promise<void> => {\r\n    try {\r\n        const { userId } = req.body;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401 });\r\n        }\r\n\r\n        const targetUserId = userId || req.user._id;\r\n\r\n        if (!checkId({ id: targetUserId, res })) return;\r\n\r\n        let projection = '_id name email birthday role avatar gender stars coins interests nbOfTasksCompleted rankInFamily memberSince familyId dailyMessage isTempPassword';  // Basic user info\r\n\r\n        // Fetch the user with specific fields\r\n        const user = await User.findById(targetUserId).select(projection);\r\n\r\n        // If user not found, return 404\r\n        if (!user) {\r\n            return throwError({ message: \"User not found\", res, status: 404 });\r\n        }\r\n\r\n        if (req.user._id.toString() !== targetUserId.toString() && ['parent', 'child'].includes(req.user.role) && req.user.email != user.email){\r\n            return throwError({ message: \"Forbidden\", res, status: 403 });\r\n        }\r\n\r\n        res.status(200).json({ message: \"Retrieving user successfully\", user });\r\n    } catch (error) {\r\n        return throwError({ message: \"Error retrieving user\", res, status: 500 });\r\n    }\r\n};\r\n\r\n// API to create user\r\nexport const createUser = async (req: CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        const data = req.body;\r\n\r\n        const { name, birthday, gender, role, avatar, interests } = data;\r\n\r\n        if (!req.user) {\r\n            return  throwError({ message: \"Unauthorized\", res, status: 401 });\r\n        }\r\n        if(req.user.role === \"child\"){\r\n            return throwError({ message: \"Forbidden\", res, status: 403 });\r\n        }\r\n\r\n        // verify all fields are filled\r\n        if (!name || !birthday || !gender || !role || !avatar || !interests) {\r\n            return throwError({ message: \"All required fields must be filled.\", res, status: 400});\r\n        }\r\n\r\n        const email = req.user.email;\r\n\r\n        const existingUser = await User.findOne({\r\n            name: name,\r\n            email: email   \r\n        });\r\n        if (existingUser) {\r\n            return throwError({ message: \"This username is already taken for this email.\", res, status: 409});\r\n        }\r\n\r\n        if (!Array.isArray(interests)) {\r\n            return throwError({ message: \"Interests must be an array.\", res, status: 400 });\r\n        }\r\n\r\n        // Gender Validation\r\n        const validGenders = ['male', 'female'];\r\n        if (!validGenders.includes(gender)) {\r\n            return throwError({ message: \"Gender must be either 'male' or 'female'.\", res, status: 400});\r\n        }\r\n\r\n        // Role validation\r\n        const validRoles = ['owner', 'parent', 'child', 'admin'];\r\n        if (!validRoles.includes(role)) {\r\n            return throwError({ message: \"Invalid role.\", res, status: 400});\r\n        }\r\n\r\n        // Birthday Validation\r\n        if (isNaN(new Date(birthday).getTime())) {\r\n            return throwError({ message: \"Invalid birthday format.\", res, status: 400 });\r\n        }\r\n\r\n        const generatedPassword = generateSecurePassword();\r\n        const hashedPassword = await bcrypt.hash(generatedPassword, 12);\r\n        \r\n        // Find the parent's family\r\n        const family = await Family.findOne({ email: req.user.email });\r\n        if (!family) {\r\n            return throwError({ message: \"Family not found.\", res, status: 404 });\r\n        }\r\n\r\n        // Create the user with the parent's familyId\r\n        const user = await User.create({\r\n            ...data,\r\n            email: email,\r\n            password: hashedPassword,\r\n            familyId: family._id  // Link to parent's family\r\n        });\r\n\r\n        // Add the new user to the family's members list\r\n        if (!family.members.includes(user.id)) {\r\n            family.members.push({_id: user.id, role, name, gender, avatar});\r\n            await family.save();\r\n        }\r\n\r\n        // Recalculate the ranks after adding the new user\r\n        await recalculateFamilyMemberRanks(family._id, user);\r\n\r\n        const from: string = `\"Guardian Grove\" <${process.env.EMAIL_USERNAME}>`;\r\n        const to: string = email;\r\n        const subject = `Welcome to Guardian Grove - ${name}'s Account Details`;\r\n        const html = `\r\n            <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; color: #333;\">\r\n                <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 5px;\">\r\n                    <h2 style=\"color: #2c3e50;\">Welcome to Guardian Grove!</h2>\r\n                    <p>Hello ${req.user.name},</p>\r\n                    \r\n                    <div style=\"background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #3498db;\">\r\n                        <p>You've successfully created a <strong>${role}</strong> account for <strong>${name}</strong>.</p>\r\n                        <p>Here are the login details:</p>\r\n                        <table style=\"width: 100%; border-collapse: collapse;\">\r\n                            <tr>\r\n                                <td style=\"padding: 8px; border-bottom: 1px solid #ddd; width: 120px;\"><strong>Username:</strong></td>\r\n                                <td style=\"padding: 8px; border-bottom: 1px solid #ddd;\">${name}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td style=\"padding: 8px;\"><strong>Temporary Password:</strong></td>\r\n                                <td style=\"padding: 8px;\">${generatedPassword}</td>\r\n                            </tr>\r\n                        </table>\r\n                    </div>\r\n                    \r\n                    <p style=\"color: #e74c3c; font-weight: bold;\">Please change this password after first login.</p>\r\n                    \r\n                    <p>If you didn't request this account creation, please contact our support immediately.</p>\r\n                    \r\n                    <div style=\"margin-top: 20px; padding-top: 20px; border-top: 1px solid #eee;\">\r\n                        <p>Best regards,</p>\r\n                        <p><strong>The Guardian Grove Team</strong></p>\r\n                        <p style=\"font-size: 12px; color: #7f8c8d;\">This is an automated message - please do not reply directly to this email.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        // Send email with the temporary password\r\n        await sendMail(from, to, subject, html);\r\n\r\n        await user.save();\r\n        res.status(200).send({ message: \"User created successfully, password email sent.\", user });\r\n    }catch(error){\r\n        if (error instanceof Error) {\r\n            // Handle MongoDB duplicate key error (11000)\r\n            if ((error as any).code === 11000) {\r\n                return throwError({ \r\n                    message: \"A user with this name and email already exists.\", \r\n                    res, \r\n                    status: 409 \r\n                });\r\n            } else {\r\n                return throwError({ message: error.message, res, status: 500 });\r\n            }\r\n        } else {\r\n            return throwError({ message: \"An unknown error occurred.\", res, status: 500 });\r\n        }    \r\n    } \r\n};\r\n\r\n// API to edit user profile\r\nexport const editUserProfile = async(req: CustomRequest, res: Response):Promise<void> => {\r\n    try{\r\n        const {userId, name, birthday, gender, avatar, role} = req.body;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401 });\r\n        }\r\n\r\n        if ((role) && !['parent', 'admin', 'owner'].includes(req.user.role)) {\r\n            return throwError({ message: \"Forbidden: You cannot change role nor email\", res, status: 403 });\r\n        }\r\n\r\n        let user;\r\n\r\n        if(userId){\r\n            if(!checkId({id: userId, res})) return;\r\n            if (req.user._id.toString() !== userId && !['parent', 'admin', 'owner'].includes(req.user.role)) {\r\n                return throwError({ message: \"Forbidden\", res, status: 403 });\r\n            }\r\n\r\n            user = await User.findById(userId);\r\n\r\n            if (!user){\r\n                return throwError({ message: \"User not found\", res, status: 404});\r\n            }\r\n\r\n            if(req.user.role !== \"admin\" && req.user.email !== user.email){\r\n                return throwError({ message: \"Forbidden\", res, status: 403 });\r\n            }\r\n        }\r\n        else{\r\n            user = req.user;\r\n        }\r\n\r\n        // Check if a user with the same email and name exists\r\n        if (name) {\r\n            const existingUser = await User.findOne({ email: user.email, name, _id: { $ne: user._id } });\r\n            if (existingUser) {\r\n                return throwError({ message: \"A user with the same email and name already exists.\", res, status: 400 });\r\n            }\r\n            user.name = name;\r\n        }\r\n\r\n        if (name) user.name = name;\r\n        if (birthday) user.birthday = birthday;\r\n        if (gender) user.gender = gender;\r\n        if (avatar) user.avatar = avatar;\r\n        if (role) user.role = role; \r\n\r\n        await user.save();\r\n\r\n        res.status(200).send({message: \"User profile updated successfully\", user});\r\n    }catch(error){\r\n        return throwError({ message: \"Failed to update. An unknown error occurred.\", res, status: 500 });\r\n    }\r\n}\r\n\r\n// API to delete user\r\nexport const deleteUser = async(req: CustomRequest, res:Response):Promise<void> => {\r\n    try{\r\n        const {userId} = req.body;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401 });\r\n        }\r\n\r\n        let user;\r\n        if(userId){\r\n            if(!checkId({id: userId, res})) return;\r\n            if (req.user._id.toString() !== userId && !['parent', 'admin', 'owner'].includes(req.user.role)) {\r\n                return throwError({ message: \"Forbidden\", res, status: 403 });\r\n            }\r\n\r\n            user = await User.findById(userId);\r\n\r\n            if (!user){\r\n                return throwError({ message: \"User not found\", res, status: 404});\r\n            }\r\n\r\n            if(req.user.role !== \"admin\" && req.user.email !== user.email){\r\n                return throwError({ message: \"Forbidden\", res, status: 403 });\r\n            }\r\n        }\r\n        else{\r\n            user = req.user;\r\n        }\r\n\r\n\r\n        // Prevent deleting the last parent in a family\r\n        const family = await Family.findById(user.familyId);\r\n        if (family) {\r\n            const parentsCount = await User.countDocuments({ familyId: family._id, role: 'parent' });\r\n            if (user.role === 'parent' && parentsCount <= 1) {\r\n                return throwError({ message: \"Cannot delete the last parent in the family\", res, status: 400 });\r\n            }\r\n\r\n            // Remove user from the family members list\r\n            family.members = family.members.filter((member) => member._id.toString() !== user._id.toString());\r\n            await family.save();\r\n        }\r\n\r\n        // Delete the user\r\n        await User.findByIdAndDelete(user._id);\r\n      \r\n        res.status(200).send({message: \"User deleted successfully\", user});\r\n    }catch(error){\r\n        return throwError({ message: \"Failed to delete. An unknown error occurred.\", res, status: 500 });\r\n    }\r\n} \r\n\r\n// API to update password\r\nexport const updatePassword = async (req: CustomRequest, res: Response): Promise<void> => {\r\n    try {\r\n        const {userId, oldPassword, newPassword, confirmPassword } = req.body;\r\n        \r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401 });\r\n        }\r\n\r\n        let user;\r\n\r\n        if(userId){\r\n            if(!checkId({id: userId, res})) return;\r\n            if (req.user._id.toString() !== userId && req.user.role !== \"admin\") {\r\n                return throwError({ message: \"Forbidden\", res, status: 403 });\r\n            }\r\n\r\n            user = await User.findById(userId);\r\n\r\n            if (!user){\r\n                return throwError({ message: \"User not found\", res, status: 404});\r\n            }\r\n        }\r\n        else{\r\n            user = req.user;\r\n        }\r\n\r\n        // Validate required fields\r\n        if (!oldPassword || !newPassword || !confirmPassword) {\r\n            return throwError({ message: \"All fields are required.\", res, status: 400 });\r\n        }\r\n\r\n        if (newPassword !== confirmPassword) {\r\n            return throwError({ message: \"Passwords do not match.\", res, status: 400 });\r\n        }\r\n\r\n        // Verify old password\r\n        const isMatch = await bcrypt.compare(oldPassword, user.password);\r\n        if (!isMatch) {\r\n            return throwError({ message: \"Old password is incorrect.\", res, status: 400 });\r\n        }\r\n\r\n        // Check if the new password is different from the old one\r\n        const isSamePassword = await bcrypt.compare(newPassword, req.user.password);\r\n        if (isSamePassword) {\r\n            return throwError({ message: \"New password cannot be the same as the old password.\", res, status: 400 });\r\n        }\r\n\r\n        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n        if (!passwordRegex.test(newPassword)) {\r\n            return throwError({\r\n                message: \"Password must be at least 8 characters long, include an uppercase letter, lowercase letter, a number, and a special character.\",\r\n                res,\r\n                status: 400\r\n            });\r\n        }\r\n\r\n        // Hash new password\r\n        const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n        user.password = hashedPassword;\r\n        user.isTempPassword = false;\r\n        await user.save();\r\n\r\n        // Return success response\r\n        res.status(200).send({ message: \"Password updated successfully.\", password: newPassword });\r\n\r\n    } catch (error) {\r\n        return throwError({ message: \"Failed to update password.\", res, status: 500 });\r\n    }\r\n};\r\n\r\n// API to get user's stars\r\nexport const getUserStars = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        res.status(200).send({message:\"Stars retrieved successfully\", stars: req.user.stars});\r\n\r\n    }catch(error){\r\n        return throwError({ message: \"Error retrieving user stars\", res, status: 500});\r\n    }\r\n} \r\n\r\n// API to update user's stars\r\nexport const updateUserStars = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        const { stars }: { stars: number } = req.body;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        if (stars === undefined || typeof stars !== \"number\" || stars < 0){\r\n            return throwError({ message: \"Stars must be a valid number.\", res, status: 400});\r\n        }\r\n\r\n        req.user.stars += stars;\r\n        await req.user.save();\r\n\r\n        if(!req.user.familyId){\r\n            return throwError({ message: \"No family id\", res, status: 400});\r\n        }\r\n        await Family.findByIdAndUpdate(req.user.familyId, { $inc: { totalStars: stars } });\r\n        \r\n        await recalculateFamilyMemberRanks(req.user.familyId, req.user);\r\n\r\n        res.status(200).send({ message: \"User stars updated successfully\", user: req.user });\r\n    }catch(error){\r\n        return throwError({ message: \"Error updating user stars\", res, status: 500});\r\n    }\r\n} \r\n\r\n// API to get user's coins\r\nexport const getUserCoins = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        res.status(200).send({message:\"Coins retrieved successfully\", coins: req.user.coins});\r\n    }catch(error){\r\n        return throwError({ message: \"Error retrieving user coins\", res, status: 500});\r\n    }\r\n} \r\n\r\n// API to update user's coins\r\nexport const updateUserCoins = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        const { coins }: { coins: number } = req.body;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        if (coins === undefined || typeof coins !== \"number\"){\r\n            return throwError({ message: \"Stars must be a valid number.\", res, status: 400});\r\n        }\r\n\r\n        req.user.coins += coins;\r\n        await req.user.save();\r\n\r\n        res.status(200).send({ message: \"User coins updated successfully\", user: req.user });\r\n    }catch(error){\r\n        return throwError({ message: \"Error updating user coins\", res, status: 500});\r\n    }\r\n} \r\n\r\n\r\n// API to get user's location\r\nexport const getLocation = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        res.status(200).send({message:\"Location retrieved successfully\", location: req.user.currentLocation});\r\n\r\n    }catch(error){\r\n        return throwError({ message: \"Error retrieving user location\", res, status: 500});\r\n    }\r\n} \r\n\r\n// API to update user's current location\r\nexport const updateLocation = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        const { currentLocation }: { currentLocation: string } = req.body;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        if (typeof currentLocation !== \"string\" || currentLocation.trim() === \"\"){\r\n            return throwError({ message: \"Location must be valid.\", res, status: 400});\r\n        }\r\n\r\n        req.user.currentLocation = currentLocation;\r\n        await req.user.save();\r\n\r\n        res.status(200).send({ message: \"User location updated successfully\", user: req.user });\r\n    }catch(error){\r\n        return throwError({ message: \"Error updating user location\", res, status: 500});\r\n    }\r\n}  \r\n\r\n// API to get user's rank\r\nexport const getUserRank = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        res.status(200).send({message:\"Rank retrieved successfully\", Rank: req.user.rankInFamily});\r\n    }catch(error){\r\n        return throwError({ message: \"Error retrieving user rank\", res, status: 500});\r\n    }\r\n};\r\n\r\n// API to update user's rank\r\n/*export const updateUserRank = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        const { rank }: { rank: number } = req.body;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        if (rank === undefined || typeof rank !== \"number\"){\r\n            return throwError({ message: \"Rank must be a valid number.\", res, status: 400});\r\n        }\r\n\r\n        req.user.rankInFamily = rank;\r\n        await req.user.save();\r\n\r\n        res.status(200).send({ message: \"User rank updated successfully\", user: req.user });\r\n    }catch(error){\r\n        return throwError({ message: \"Error updating user rank\", res, status: 500});\r\n    }\r\n};*/\r\n\r\n// API to get user's interesets\r\nexport const getUserInterests = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        res.status(200).send({ message: \"Interests retrieved successfully\", Interests: req.user.interests});\r\n    }catch(error){\r\n        throwError({ message: \"Error retrieving user interests\", res, status: 500});\r\n    }\r\n};\r\n\r\n// API to start an adventure\r\nexport const startAdventure = async (req: CustomRequest, res: Response): Promise<void> => {\r\n    try {\r\n        const {adventureId} = req.body;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401 });\r\n        }\r\n\r\n        const userId = req.user._id;\r\n\r\n        if(!checkId({id: adventureId, res})) return;\r\n        if(!checkId({id: userId.toString(), res})) return;\r\n\r\n        // Find the adventure by adventureId\r\n        const adventure = await Adventure.findById(adventureId);\r\n        if (!adventure) {\r\n            return throwError({ message: \"Adventure not found\", res, status: 404 });\r\n        }\r\n\r\n        const existingAdventureProgress = req.user.adventures.find(\r\n            (adventureProgress) => \r\n                adventureProgress.adventureId.equals(adventureId)\r\n        );\r\n        if (existingAdventureProgress) {\r\n            return throwError({ message: \"Adventure already started\", res, status: 400 });\r\n        }\r\n\r\n        // Add adventure to user's adventures\r\n        const newAdventureProgress : IAdventureProgress = {\r\n            adventureId: adventureId,\r\n            challenges: adventure.challenges.map((challenge) => ({\r\n                challengeId: challenge._id,\r\n                isCompleted: false,  \r\n            })),\r\n            status: \"in-progress\",\r\n            isAdventureCompleted: false,\r\n            starsReward: adventure.starsReward,\r\n            coinsReward: adventure.coinsReward,\r\n            progress: 0,\r\n        };\r\n\r\n        req.user.adventures.push(newAdventureProgress);\r\n        await req.user.save();\r\n\r\n        res.status(200).send({ message: \"Adventure started successfully\", user: req.user });\r\n\r\n    } catch (error) {\r\n        return throwError({ message: \"An unknown error occurred while starting the adventure.\", res, status: 500 });\r\n    }\r\n};\r\n\r\nexport const completeChallenge = async (req: CustomRequest, res: Response): Promise<void> => {\r\n    try {\r\n        const { adventureId, challengeId } = req.body;\r\n\r\n        if (!checkId({ id: adventureId, res })) return;\r\n        if (!checkId({ id: challengeId, res })) return;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401 });\r\n        }\r\n\r\n        const user = req.user;\r\n        const adventureProgress = user.adventures.find(\r\n            (adventure) => adventure.adventureId.equals(adventureId)\r\n        );\r\n        if (!adventureProgress) {\r\n            return throwError({ message: \"Adventure not found in user's profile\", res, status: 404 });\r\n        }\r\n\r\n        const challenge = adventureProgress.challenges.find(\r\n            (challenge) => challenge.challengeId.equals(challengeId)\r\n        );\r\n        if (!challenge) {\r\n            return throwError({ message: \"Challenge not found in adventure\", res, status: 404 });\r\n        }\r\n\r\n        // Fetch the full adventure to get challenge rewards\r\n        const adventure = await Adventure.findById(adventureId).lean();\r\n\r\n        if (!adventure) {\r\n            return throwError({ message: \"Adventure not found\", res, status: 404 });\r\n        }\r\n\r\n        const targetChallenge = adventure.challenges.find(ch =>\r\n            ch._id.equals(challengeId)\r\n        );\r\n\r\n        if (!targetChallenge) {\r\n            return throwError({ message: \"Challenge data not found in adventure\", res, status: 404 });\r\n        }\r\n\r\n        // Mark challenge as complete and add rewards\r\n        challenge.isCompleted = true;\r\n        challenge.completedAt = new Date();\r\n\r\n        const starsReward = targetChallenge.starsReward;\r\n        const coinsReward = targetChallenge.coinsReward;\r\n\r\n        user.stars += starsReward;\r\n        user.coins += coinsReward;\r\n\r\n        adventureProgress.progress = (adventureProgress.challenges.filter(challenge => challenge.isCompleted).length / adventureProgress.challenges.length) * 100;\r\n\r\n        let adventureStars = 0;\r\n        if (adventureProgress.progress === 100) {\r\n            adventureProgress.isAdventureCompleted = true;\r\n            adventureProgress.status = 'completed';\r\n            adventureStars = adventureProgress.starsReward;\r\n\r\n            user.coins += adventureProgress.coinsReward;\r\n            user.stars += adventureStars;\r\n        }\r\n\r\n        // Update the family total stars\r\n        if (user.familyId) {\r\n            const totalStars = starsReward + adventureStars;\r\n            await Family.findByIdAndUpdate(user.familyId, {\r\n                $inc: { totalStars: totalStars }\r\n            });\r\n            await recalculateFamilyMemberRanks(user.familyId, user);\r\n        }\r\n\r\n        await user.save();\r\n\r\n        res.status(200).json({ message: \"Challenge completed successfully\", adventureProgress });\r\n\r\n    } catch (error) {\r\n        return throwError({ message: \"An unknown error occurred while completing the challenge.\", res, status: 500 });\r\n    }\r\n};\r\n\r\n// API to get user's adventures\r\nexport const getUserAdventures = async(req:CustomRequest, res: Response): Promise<void> => {\r\n    try{\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        res.status(200).send({ message: \"User adventures retrieved successfully\", Adventure: req.user.adventures});\r\n    }catch(error){\r\n        return throwError({ message: \"Error retrieving user adventures\", res, status: 500});\r\n    }\r\n};\r\n\r\n//API to get user's purchased items\r\nexport const getUserPurchasedItems = async (req: CustomRequest, res: Response): Promise<void> => {\r\n    try {\r\n        const { userId } = req.body;\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401 });\r\n        }\r\n\r\n        const targetUserId = userId || req.user._id;\r\n\r\n        if (!checkId({ id: targetUserId, res })) return;\r\n\r\n        const isAuthorized = req.user._id.toString() === targetUserId.toString();\r\n        if (!isAuthorized) {\r\n            return throwError({ message: \"Forbidden\", res, status: 403 });\r\n        }\r\n\r\n        // Fetch only itemIds from purchasedItems\r\n        const user = await User.findById(targetUserId).select('purchasedItems.itemId');\r\n\r\n        if (!user) {\r\n            return throwError({ message: \"User not found\", res, status: 404 });\r\n        }\r\n\r\n        const purchasedItemIds = user.purchasedItems.map((item: any) => item.itemId);\r\n\r\n        res.status(200).json({ message: \"Purchased items retrieved successfully\", purchasedItems: purchasedItemIds });\r\n    } catch (error) {\r\n        return throwError({ message: \"Error retrieving purchased items\", res, status: 500 });\r\n    }\r\n};\r\n\r\n//API to get user's avatar\r\nexport const getUserAvatar = async (req: CustomRequest, res: Response) => {\r\n    try {\r\n\r\n        if (!req.user) {\r\n            return throwError({ message: \"Unauthorized\", res, status: 401});\r\n        }\r\n\r\n        const user = req.user;\r\n\r\n        res.status(200).json({message: \"Avatar retrieved successfully\", avatar: user.avatar });\r\n    } catch (error) {\r\n        return throwError({ message: \"Error fetching avatar\", res, status: 500});\r\n    }\r\n};"],"names":["completeChallenge","createUser","deleteUser","editUserProfile","getLocation","getUserAdventures","getUserAvatar","getUserById","getUserCoins","getUserInterests","getUserPurchasedItems","getUserRank","getUserStars","getUsers","startAdventure","updateLocation","updatePassword","updateUserCoins","updateUserStars","req","res","users","User","find","status","send","error","throwError","message","userId","body","user","targetUserId","_id","checkId","id","projection","findById","select","toString","includes","role","email","json","data","name","birthday","gender","avatar","interests","existingUser","findOne","Array","isArray","validGenders","validRoles","isNaN","Date","getTime","generatedPassword","generateSecurePassword","hashedPassword","bcrypt","hash","family","Family","create","password","familyId","members","push","save","recalculateFamilyMemberRanks","from","process","env","EMAIL_USERNAME","to","subject","html","sendMail","Error","code","$ne","parentsCount","countDocuments","filter","member","findByIdAndDelete","oldPassword","newPassword","confirmPassword","isMatch","compare","isSamePassword","passwordRegex","test","isTempPassword","stars","undefined","findByIdAndUpdate","$inc","totalStars","coins","location","currentLocation","trim","Rank","rankInFamily","Interests","adventureId","adventure","Adventure","existingAdventureProgress","adventures","adventureProgress","equals","newAdventureProgress","challenges","map","challenge","challengeId","isCompleted","isAdventureCompleted","starsReward","coinsReward","progress","lean","targetChallenge","ch","completedAt","length","adventureStars","isAuthorized","purchasedItemIds","purchasedItems","item","itemId"],"mappings":"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"}