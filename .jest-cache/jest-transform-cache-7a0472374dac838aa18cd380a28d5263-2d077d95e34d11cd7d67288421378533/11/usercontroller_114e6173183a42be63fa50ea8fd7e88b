41594db4174e9a2054cd5a4c93e97f16
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get completeChallenge () {
        return completeChallenge;
    },
    get createUser () {
        return createUser;
    },
    get deleteUser () {
        return deleteUser;
    },
    get editUserProfile () {
        return editUserProfile;
    },
    get getLocation () {
        return getLocation;
    },
    get getUserAdventures () {
        return getUserAdventures;
    },
    get getUserAvatar () {
        return getUserAvatar;
    },
    get getUserById () {
        return getUserById;
    },
    get getUserCoins () {
        return getUserCoins;
    },
    get getUserInterests () {
        return getUserInterests;
    },
    get getUserPurchasedItems () {
        return getUserPurchasedItems;
    },
    get getUserRank () {
        return getUserRank;
    },
    get getUserStars () {
        return getUserStars;
    },
    get getUsers () {
        return getUsers;
    },
    get startAdventure () {
        return startAdventure;
    },
    get updateLocation () {
        return updateLocation;
    },
    get updatePassword () {
        return updatePassword;
    },
    get updateUserCoins () {
        return updateUserCoins;
    },
    get updateUserStars () {
        return updateUserStars;
    }
});
const _bcrypt = /*#__PURE__*/ _interop_require_default(require("bcrypt"));
const _usermodel = require("../models/user.model");
const _error = require("../utils/error");
const _checkId = require("../utils/checkId");
const _adventuremodel = require("../models/adventure.model");
const _familymodel = require("../models/family.model");
const _recalculateFamilyMemberRanks = require("../utils/recalculateFamilyMemberRanks");
const _emailservice = require("../services/email.service");
const _generateSecurePassword = require("../utils/generateSecurePassword");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const getUsers = async (req, res)=>{
    try {
        const users = await _usermodel.User.find();
        res.status(200).send(users);
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error retrieving users",
            res,
            status: 500
        });
    }
};
const getUserById = async (req, res)=>{
    try {
        const { userId } = req.body;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        const targetUserId = userId || req.user._id;
        if (!(0, _checkId.checkId)({
            id: targetUserId,
            res
        })) return;
        let projection = '_id name email birthday role avatar gender stars coins interests nbOfTasksCompleted rankInFamily memberSince familyId dailyMessage isTempPassword'; // Basic user info
        // Fetch the user with specific fields
        const user = await _usermodel.User.findById(targetUserId).select(projection);
        // If user not found, return 404
        if (!user) {
            return (0, _error.throwError)({
                message: "User not found",
                res,
                status: 404
            });
        }
        if (req.user._id.toString() !== targetUserId.toString() && [
            'parent',
            'child'
        ].includes(req.user.role) && req.user.email != user.email) {
            return (0, _error.throwError)({
                message: "Forbidden",
                res,
                status: 403
            });
        }
        res.status(200).json({
            message: "Retrieving user successfully",
            user
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error retrieving user",
            res,
            status: 500
        });
    }
};
const createUser = async (req, res)=>{
    try {
        const data = req.body;
        const { name, birthday, gender, role, avatar, interests } = data;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        if (req.user.role === "child") {
            return (0, _error.throwError)({
                message: "Forbidden",
                res,
                status: 403
            });
        }
        // verify all fields are filled
        if (!name || !birthday || !gender || !role || !avatar || !interests) {
            return (0, _error.throwError)({
                message: "All required fields must be filled.",
                res,
                status: 400
            });
        }
        const email = req.user.email;
        const existingUser = await _usermodel.User.findOne({
            name: name,
            email: email
        });
        if (existingUser) {
            return (0, _error.throwError)({
                message: "This username is already taken for this email.",
                res,
                status: 409
            });
        }
        if (!Array.isArray(interests)) {
            return (0, _error.throwError)({
                message: "Interests must be an array.",
                res,
                status: 400
            });
        }
        // Gender Validation
        const validGenders = [
            'male',
            'female'
        ];
        if (!validGenders.includes(gender)) {
            return (0, _error.throwError)({
                message: "Gender must be either 'male' or 'female'.",
                res,
                status: 400
            });
        }
        // Role validation
        const validRoles = [
            'owner',
            'parent',
            'child',
            'admin'
        ];
        if (!validRoles.includes(role)) {
            return (0, _error.throwError)({
                message: "Invalid role.",
                res,
                status: 400
            });
        }
        // Birthday Validation
        if (isNaN(new Date(birthday).getTime())) {
            return (0, _error.throwError)({
                message: "Invalid birthday format.",
                res,
                status: 400
            });
        }
        const generatedPassword = (0, _generateSecurePassword.generateSecurePassword)();
        const hashedPassword = await _bcrypt.default.hash(generatedPassword, 12);
        // Find the parent's family
        const family = await _familymodel.Family.findOne({
            email: req.user.email
        });
        if (!family) {
            return (0, _error.throwError)({
                message: "Family not found.",
                res,
                status: 404
            });
        }
        // Create the user with the parent's familyId
        const user = await _usermodel.User.create({
            ...data,
            email: email,
            password: hashedPassword,
            familyId: family._id // Link to parent's family
        });
        // Add the new user to the family's members list
        if (!family.members.includes(user.id)) {
            family.members.push({
                _id: user.id,
                role,
                name,
                gender,
                avatar
            });
            await family.save();
        }
        // Recalculate the ranks after adding the new user
        await (0, _recalculateFamilyMemberRanks.recalculateFamilyMemberRanks)(family._id, user);
        const from = `"Guardian Grove" <${process.env.EMAIL_USERNAME}>`;
        const to = email;
        const subject = `Welcome to Guardian Grove - ${name}'s Account Details`;
        const html = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; color: #333;">
                <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px;">
                    <h2 style="color: #2c3e50;">Welcome to Guardian Grove!</h2>
                    <p>Hello ${req.user.name},</p>
                    
                    <div style="background-color: white; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #3498db;">
                        <p>You've successfully created a <strong>${role}</strong> account for <strong>${name}</strong>.</p>
                        <p>Here are the login details:</p>
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr>
                                <td style="padding: 8px; border-bottom: 1px solid #ddd; width: 120px;"><strong>Username:</strong></td>
                                <td style="padding: 8px; border-bottom: 1px solid #ddd;">${name}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px;"><strong>Temporary Password:</strong></td>
                                <td style="padding: 8px;">${generatedPassword}</td>
                            </tr>
                        </table>
                    </div>
                    
                    <p style="color: #e74c3c; font-weight: bold;">Please change this password after first login.</p>
                    
                    <p>If you didn't request this account creation, please contact our support immediately.</p>
                    
                    <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #eee;">
                        <p>Best regards,</p>
                        <p><strong>The Guardian Grove Team</strong></p>
                        <p style="font-size: 12px; color: #7f8c8d;">This is an automated message - please do not reply directly to this email.</p>
                    </div>
                </div>
            </div>
        `;
        // Send email with the temporary password
        await (0, _emailservice.sendMail)(from, to, subject, html);
        await user.save();
        res.status(200).send({
            message: "User created successfully, password email sent.",
            user
        });
    } catch (error) {
        if (error instanceof Error) {
            // Handle MongoDB duplicate key error (11000)
            if (error.code === 11000) {
                return (0, _error.throwError)({
                    message: "A user with this name and email already exists.",
                    res,
                    status: 409
                });
            } else {
                return (0, _error.throwError)({
                    message: error.message,
                    res,
                    status: 500
                });
            }
        } else {
            return (0, _error.throwError)({
                message: "An unknown error occurred.",
                res,
                status: 500
            });
        }
    }
};
const editUserProfile = async (req, res)=>{
    try {
        const { userId, name, birthday, gender, avatar, role } = req.body;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        if (role && ![
            'parent',
            'admin',
            'owner'
        ].includes(req.user.role)) {
            return (0, _error.throwError)({
                message: "Forbidden: You cannot change role nor email",
                res,
                status: 403
            });
        }
        let user;
        if (userId) {
            if (!(0, _checkId.checkId)({
                id: userId,
                res
            })) return;
            if (req.user._id.toString() !== userId && ![
                'parent',
                'admin',
                'owner'
            ].includes(req.user.role)) {
                return (0, _error.throwError)({
                    message: "Forbidden",
                    res,
                    status: 403
                });
            }
            user = await _usermodel.User.findById(userId);
            if (!user) {
                return (0, _error.throwError)({
                    message: "User not found",
                    res,
                    status: 404
                });
            }
            if (req.user.role !== "admin" && req.user.email !== user.email) {
                return (0, _error.throwError)({
                    message: "Forbidden",
                    res,
                    status: 403
                });
            }
        } else {
            user = req.user;
        }
        // Check if a user with the same email and name exists
        if (name) {
            const existingUser = await _usermodel.User.findOne({
                email: user.email,
                name,
                _id: {
                    $ne: user._id
                }
            });
            if (existingUser) {
                return (0, _error.throwError)({
                    message: "A user with the same email and name already exists.",
                    res,
                    status: 400
                });
            }
            user.name = name;
        }
        if (name) user.name = name;
        if (birthday) user.birthday = birthday;
        if (gender) user.gender = gender;
        if (avatar) user.avatar = avatar;
        if (role) user.role = role;
        await user.save();
        res.status(200).send({
            message: "User profile updated successfully",
            user
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Failed to update. An unknown error occurred.",
            res,
            status: 500
        });
    }
};
const deleteUser = async (req, res)=>{
    try {
        const { userId } = req.body;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        let user;
        if (userId) {
            if (!(0, _checkId.checkId)({
                id: userId,
                res
            })) return;
            if (req.user._id.toString() !== userId && ![
                'parent',
                'admin',
                'owner'
            ].includes(req.user.role)) {
                return (0, _error.throwError)({
                    message: "Forbidden",
                    res,
                    status: 403
                });
            }
            user = await _usermodel.User.findById(userId);
            if (!user) {
                return (0, _error.throwError)({
                    message: "User not found",
                    res,
                    status: 404
                });
            }
            if (req.user.role !== "admin" && req.user.email !== user.email) {
                return (0, _error.throwError)({
                    message: "Forbidden",
                    res,
                    status: 403
                });
            }
        } else {
            user = req.user;
        }
        // Prevent deleting the last parent in a family
        const family = await _familymodel.Family.findById(user.familyId);
        if (family) {
            const parentsCount = await _usermodel.User.countDocuments({
                familyId: family._id,
                role: 'parent'
            });
            if (user.role === 'parent' && parentsCount <= 1) {
                return (0, _error.throwError)({
                    message: "Cannot delete the last parent in the family",
                    res,
                    status: 400
                });
            }
            // Remove user from the family members list
            family.members = family.members.filter((member)=>member._id.toString() !== user._id.toString());
            await family.save();
        }
        // Delete the user
        await _usermodel.User.findByIdAndDelete(user._id);
        res.status(200).send({
            message: "User deleted successfully",
            user
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Failed to delete. An unknown error occurred.",
            res,
            status: 500
        });
    }
};
const updatePassword = async (req, res)=>{
    try {
        const { userId, oldPassword, newPassword, confirmPassword } = req.body;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        let user;
        if (userId) {
            if (!(0, _checkId.checkId)({
                id: userId,
                res
            })) return;
            if (req.user._id.toString() !== userId && req.user.role !== "admin") {
                return (0, _error.throwError)({
                    message: "Forbidden",
                    res,
                    status: 403
                });
            }
            user = await _usermodel.User.findById(userId);
            if (!user) {
                return (0, _error.throwError)({
                    message: "User not found",
                    res,
                    status: 404
                });
            }
        } else {
            user = req.user;
        }
        // Validate required fields
        if (!oldPassword || !newPassword || !confirmPassword) {
            return (0, _error.throwError)({
                message: "All fields are required.",
                res,
                status: 400
            });
        }
        if (newPassword !== confirmPassword) {
            return (0, _error.throwError)({
                message: "Passwords do not match.",
                res,
                status: 400
            });
        }
        // Verify old password
        const isMatch = await _bcrypt.default.compare(oldPassword, user.password);
        if (!isMatch) {
            return (0, _error.throwError)({
                message: "Old password is incorrect.",
                res,
                status: 400
            });
        }
        // Check if the new password is different from the old one
        const isSamePassword = await _bcrypt.default.compare(newPassword, req.user.password);
        if (isSamePassword) {
            return (0, _error.throwError)({
                message: "New password cannot be the same as the old password.",
                res,
                status: 400
            });
        }
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
        if (!passwordRegex.test(newPassword)) {
            return (0, _error.throwError)({
                message: "Password must be at least 8 characters long, include an uppercase letter, lowercase letter, a number, and a special character.",
                res,
                status: 400
            });
        }
        // Hash new password
        const hashedPassword = await _bcrypt.default.hash(newPassword, 10);
        user.password = hashedPassword;
        user.isTempPassword = false;
        await user.save();
        // Return success response
        res.status(200).send({
            message: "Password updated successfully.",
            password: newPassword
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Failed to update password.",
            res,
            status: 500
        });
    }
};
const getUserStars = async (req, res)=>{
    try {
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        res.status(200).send({
            message: "Stars retrieved successfully",
            stars: req.user.stars
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error retrieving user stars",
            res,
            status: 500
        });
    }
};
const updateUserStars = async (req, res)=>{
    try {
        const { stars } = req.body;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        if (stars === undefined || typeof stars !== "number" || stars < 0) {
            return (0, _error.throwError)({
                message: "Stars must be a valid number.",
                res,
                status: 400
            });
        }
        req.user.stars += stars;
        await req.user.save();
        if (!req.user.familyId) {
            return (0, _error.throwError)({
                message: "No family id",
                res,
                status: 400
            });
        }
        await _familymodel.Family.findByIdAndUpdate(req.user.familyId, {
            $inc: {
                totalStars: stars
            }
        });
        await (0, _recalculateFamilyMemberRanks.recalculateFamilyMemberRanks)(req.user.familyId, req.user);
        res.status(200).send({
            message: "User stars updated successfully",
            user: req.user
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error updating user stars",
            res,
            status: 500
        });
    }
};
const getUserCoins = async (req, res)=>{
    try {
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        res.status(200).send({
            message: "Coins retrieved successfully",
            coins: req.user.coins
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error retrieving user coins",
            res,
            status: 500
        });
    }
};
const updateUserCoins = async (req, res)=>{
    try {
        const { coins } = req.body;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        if (coins === undefined || typeof coins !== "number") {
            return (0, _error.throwError)({
                message: "Stars must be a valid number.",
                res,
                status: 400
            });
        }
        req.user.coins += coins;
        await req.user.save();
        res.status(200).send({
            message: "User coins updated successfully",
            user: req.user
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error updating user coins",
            res,
            status: 500
        });
    }
};
const getLocation = async (req, res)=>{
    try {
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        res.status(200).send({
            message: "Location retrieved successfully",
            location: req.user.currentLocation
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error retrieving user location",
            res,
            status: 500
        });
    }
};
const updateLocation = async (req, res)=>{
    try {
        const { currentLocation } = req.body;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        if (typeof currentLocation !== "string" || currentLocation.trim() === "") {
            return (0, _error.throwError)({
                message: "Location must be valid.",
                res,
                status: 400
            });
        }
        req.user.currentLocation = currentLocation;
        await req.user.save();
        res.status(200).send({
            message: "User location updated successfully",
            user: req.user
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error updating user location",
            res,
            status: 500
        });
    }
};
const getUserRank = async (req, res)=>{
    try {
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        res.status(200).send({
            message: "Rank retrieved successfully",
            Rank: req.user.rankInFamily
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error retrieving user rank",
            res,
            status: 500
        });
    }
};
const getUserInterests = async (req, res)=>{
    try {
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        res.status(200).send({
            message: "Interests retrieved successfully",
            Interests: req.user.interests
        });
    } catch (error) {
        (0, _error.throwError)({
            message: "Error retrieving user interests",
            res,
            status: 500
        });
    }
};
const startAdventure = async (req, res)=>{
    try {
        const { adventureId } = req.body;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        const userId = req.user._id;
        if (!(0, _checkId.checkId)({
            id: adventureId,
            res
        })) return;
        if (!(0, _checkId.checkId)({
            id: userId.toString(),
            res
        })) return;
        // Find the adventure by adventureId
        const adventure = await _adventuremodel.Adventure.findById(adventureId);
        if (!adventure) {
            return (0, _error.throwError)({
                message: "Adventure not found",
                res,
                status: 404
            });
        }
        const existingAdventureProgress = req.user.adventures.find((adventureProgress)=>adventureProgress.adventureId.equals(adventureId));
        if (existingAdventureProgress) {
            return (0, _error.throwError)({
                message: "Adventure already started",
                res,
                status: 400
            });
        }
        // Add adventure to user's adventures
        const newAdventureProgress = {
            adventureId: adventureId,
            challenges: adventure.challenges.map((challenge)=>({
                    challengeId: challenge._id,
                    isCompleted: false
                })),
            status: "in-progress",
            isAdventureCompleted: false,
            starsReward: adventure.starsReward,
            coinsReward: adventure.coinsReward,
            progress: 0
        };
        req.user.adventures.push(newAdventureProgress);
        await req.user.save();
        res.status(200).send({
            message: "Adventure started successfully",
            user: req.user
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "An unknown error occurred while starting the adventure.",
            res,
            status: 500
        });
    }
};
const completeChallenge = async (req, res)=>{
    try {
        const { adventureId, challengeId } = req.body;
        if (!(0, _checkId.checkId)({
            id: adventureId,
            res
        })) return;
        if (!(0, _checkId.checkId)({
            id: challengeId,
            res
        })) return;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        const user = req.user;
        const adventureProgress = user.adventures.find((adventure)=>adventure.adventureId.equals(adventureId));
        if (!adventureProgress) {
            return (0, _error.throwError)({
                message: "Adventure not found in user's profile",
                res,
                status: 404
            });
        }
        const challenge = adventureProgress.challenges.find((challenge)=>challenge.challengeId.equals(challengeId));
        if (!challenge) {
            return (0, _error.throwError)({
                message: "Challenge not found in adventure",
                res,
                status: 404
            });
        }
        // Fetch the full adventure to get challenge rewards
        const adventure = await _adventuremodel.Adventure.findById(adventureId).lean();
        if (!adventure) {
            return (0, _error.throwError)({
                message: "Adventure not found",
                res,
                status: 404
            });
        }
        const targetChallenge = adventure.challenges.find((ch)=>ch._id.equals(challengeId));
        if (!targetChallenge) {
            return (0, _error.throwError)({
                message: "Challenge data not found in adventure",
                res,
                status: 404
            });
        }
        // Mark challenge as complete and add rewards
        challenge.isCompleted = true;
        challenge.completedAt = new Date();
        const starsReward = targetChallenge.starsReward;
        const coinsReward = targetChallenge.coinsReward;
        user.stars += starsReward;
        user.coins += coinsReward;
        adventureProgress.progress = adventureProgress.challenges.filter((challenge)=>challenge.isCompleted).length / adventureProgress.challenges.length * 100;
        let adventureStars = 0;
        if (adventureProgress.progress === 100) {
            adventureProgress.isAdventureCompleted = true;
            adventureProgress.status = 'completed';
            adventureStars = adventureProgress.starsReward;
            user.coins += adventureProgress.coinsReward;
            user.stars += adventureStars;
        }
        // Update the family total stars
        if (user.familyId) {
            const totalStars = starsReward + adventureStars;
            await _familymodel.Family.findByIdAndUpdate(user.familyId, {
                $inc: {
                    totalStars: totalStars
                }
            });
            await (0, _recalculateFamilyMemberRanks.recalculateFamilyMemberRanks)(user.familyId, user);
        }
        await user.save();
        res.status(200).json({
            message: "Challenge completed successfully",
            adventureProgress
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "An unknown error occurred while completing the challenge.",
            res,
            status: 500
        });
    }
};
const getUserAdventures = async (req, res)=>{
    try {
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        res.status(200).send({
            message: "User adventures retrieved successfully",
            Adventure: req.user.adventures
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error retrieving user adventures",
            res,
            status: 500
        });
    }
};
const getUserPurchasedItems = async (req, res)=>{
    try {
        const { userId } = req.body;
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        const targetUserId = userId || req.user._id;
        if (!(0, _checkId.checkId)({
            id: targetUserId,
            res
        })) return;
        const isAuthorized = req.user._id.toString() === targetUserId.toString();
        if (!isAuthorized) {
            return (0, _error.throwError)({
                message: "Forbidden",
                res,
                status: 403
            });
        }
        // Fetch only itemIds from purchasedItems
        const user = await _usermodel.User.findById(targetUserId).select('purchasedItems.itemId');
        if (!user) {
            return (0, _error.throwError)({
                message: "User not found",
                res,
                status: 404
            });
        }
        const purchasedItemIds = user.purchasedItems.map((item)=>item.itemId);
        res.status(200).json({
            message: "Purchased items retrieved successfully",
            purchasedItems: purchasedItemIds
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error retrieving purchased items",
            res,
            status: 500
        });
    }
};
const getUserAvatar = async (req, res)=>{
    try {
        if (!req.user) {
            return (0, _error.throwError)({
                message: "Unauthorized",
                res,
                status: 401
            });
        }
        const user = req.user;
        res.status(200).json({
            message: "Avatar retrieved successfully",
            avatar: user.avatar
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error fetching avatar",
            res,
            status: 500
        });
    }
};

//# sourceMappingURL=data:application/json;base64,