{"file":"C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\tests\\controllers\\auth.controller.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\tests\\controllers\\auth.controller.test.ts"],"sourcesContent":["import { testUtils } from '../setup';\r\nimport { login, register, forgetPassword } from '../../src/controllers/auth.controller';\r\nimport { User } from '../../src/models/user.model';\r\nimport { Family } from '../../src/models/family.model';\r\nimport * as generateSecurePassword from '../../src/utils/generateSecurePassword';\r\nimport * as emailService from '../../src/services/email.service';\r\nimport * as bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Mock all dependencies\r\njest.mock('../../src/models/user.model');\r\njest.mock('../../src/models/family.model');\r\njest.mock('../../src/services/email.service');\r\njest.mock('../../src/utils/generateSecurePassword');\r\njest.mock('bcrypt');\r\njest.mock('jsonwebtoken');\r\n\r\nconst mockUser = User as jest.Mocked<typeof User>;\r\nconst mockFamily = Family as jest.Mocked<typeof Family>;\r\nconst mockGenerateSecurePassword = generateSecurePassword as jest.Mocked<typeof generateSecurePassword>;\r\nconst mockEmailService = emailService as jest.Mocked<typeof emailService>;\r\nconst mockBcrypt = bcrypt as jest.Mocked<typeof bcrypt>;\r\nconst mockJwt = jwt as jest.Mocked<typeof jwt>;\r\n\r\ndescribe('Auth Controller Tests', () => {\r\n    beforeEach(() => {\r\n        jest.clearAllMocks();\r\n        \r\n        // Setup User model methods\r\n        mockUser.findOne = jest.fn();\r\n        mockUser.create = jest.fn();\r\n\r\n        // Setup Family model methods\r\n        mockFamily.findOne = jest.fn();\r\n        \r\n        // Setup utility mocks\r\n        mockGenerateSecurePassword.generateSecurePassword.mockReturnValue('TempPass123!');\r\n        jest.spyOn(mockEmailService, 'sendMail').mockResolvedValue(undefined);\r\n        \r\n        (jest.spyOn(bcrypt, 'hash') as jest.Mock).mockResolvedValue('hashedPassword');\r\n        (jest.spyOn(bcrypt, 'compare') as jest.Mock).mockResolvedValue(true);\r\n        (jest.spyOn(jwt, 'sign') as jest.Mock).mockResolvedValue('mock-jwt-token');\r\n\r\n        // Set JWT_SECRET environment variable\r\n        process.env.JWT_SECRET = 'test_jwt_secret_key_for_guardian_grove_123';\r\n    });\r\n\r\n    afterEach(() => {\r\n        // Clean up environment variables if needed\r\n        if (!process.env.JWT_SECRET) {\r\n            process.env.JWT_SECRET = 'test_jwt_secret_key_for_guardian_grove_123';\r\n        }\r\n    });\r\n\r\n    // 1. test login API\r\n    describe('login', () => {\r\n        const validLoginData = {\r\n            name: 'Test User',\r\n            email: 'test@example.com',\r\n            password: 'TestPass123!'\r\n        };\r\n\r\n        it('should login successfully with valid credentials', async () => {\r\n            const mockUserData = {\r\n                ...testUtils.createMockUser({\r\n                    ...validLoginData,\r\n                    isTempPassword: false\r\n                }),\r\n                id: '507f1f77bcf86cd799439011' \r\n            };\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.compare as jest.Mock).mockResolvedValue(true);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockUser.findOne).toHaveBeenCalledWith({\r\n                name: validLoginData.name,\r\n                email: validLoginData.email\r\n            });\r\n            expect(mockBcrypt.compare).toHaveBeenCalledWith(validLoginData.password, mockUserData.password);\r\n            expect(mockJwt.sign).toHaveBeenCalledWith(\r\n                { userId: mockUserData.id, role: mockUserData.role },\r\n                'test_jwt_secret_key_for_guardian_grove_123'\r\n            );\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                user: mockUserData,\r\n                token: 'mock-jwt-token',\r\n                requiresPasswordChange: false,\r\n                message: 'Login successful'\r\n            });\r\n        });\r\n\r\n        it('should login with temporary password and require password change', async () => {\r\n            const mockUserData = {\r\n                ...testUtils.createMockUser({\r\n                    ...validLoginData,\r\n                    isTempPassword: true\r\n                }),\r\n                id: '507f1f77bcf86cd799439011' // Add id property for JWT\r\n            };\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.compare as jest.Mock).mockResolvedValue(true);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                user: mockUserData,\r\n                token: 'mock-jwt-token',\r\n                requiresPasswordChange: true,\r\n                message: 'Please set a new password'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if required fields are missing', async () => {\r\n            const incompleteData = { name: 'Test User', email: 'test@example.com' }; // Missing password\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: incompleteData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Name, email, and password are required.'\r\n            });\r\n        });\r\n\r\n        it('should return 404 if user not found', async () => {\r\n            mockUser.findOne.mockResolvedValue(null);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(404);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid credentials. User not found.'\r\n            });\r\n        });\r\n\r\n        it('should return 401 if password is incorrect', async () => {\r\n            const mockUserData = {\r\n                ...testUtils.createMockUser(validLoginData),\r\n                id: '507f1f77bcf86cd799439011'\r\n            };\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.compare as jest.Mock).mockResolvedValue(false);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(401);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid password.'\r\n            });\r\n        });\r\n\r\n        it('should handle JWT signing errors gracefully', async () => {\r\n            const mockUserData = {\r\n                ...testUtils.createMockUser(validLoginData),\r\n                id: '507f1f77bcf86cd799439011'\r\n            };\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.compare as jest.Mock).mockResolvedValue(true);\r\n            // Mock JWT sign to throw an error\r\n            (mockJwt.sign as jest.Mock).mockRejectedValue(new Error('JWT signing failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Something went wrong while logging in.'\r\n            });\r\n        });\r\n\r\n        it('should handle database errors gracefully', async () => {\r\n            mockUser.findOne.mockRejectedValue(new Error('Database connection failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Something went wrong while logging in.'\r\n            });\r\n        });\r\n    });\r\n\r\n    // 2. test register API\r\n    describe('register', () => {\r\n        const validRegisterData = {\r\n            name: 'Test Parent',\r\n            email: 'parent@example.com',\r\n            password: 'TestPass123!',\r\n            confirmPassword: 'TestPass123!',\r\n            birthday: '1985-01-01',\r\n            gender: 'male',\r\n            role: 'parent',\r\n            avatar: '/avatar.png',\r\n            interests: ['reading', 'sports'],\r\n            familyName: 'Test Family',\r\n            familyAvatar: '/family-avatar.png'\r\n        };\r\n\r\n        it('should register successfully with valid data', async () => {\r\n            const mockFamilyData = testUtils.createMockFamily({\r\n                email: validRegisterData.email,\r\n                familyName: validRegisterData.familyName,\r\n                members: []\r\n            });\r\n            const mockCreatedUser = {\r\n                ...testUtils.createMockUser({\r\n                    ...validRegisterData,\r\n                    familyId: mockFamilyData._id\r\n                }),\r\n                id: '507f1f77bcf86cd799439011' // Add id property for JWT\r\n            };\r\n\r\n            mockFamily.findOne.mockResolvedValue(null); // New family\r\n            mockFamily.prototype.save = jest.fn().mockResolvedValue(mockFamilyData);\r\n            mockUser.findOne.mockResolvedValue(null); // No existing user with same name\r\n            mockUser.create.mockResolvedValue(mockCreatedUser as any);\r\n\r\n            // Mock the Family constructor\r\n            (mockFamily as any).mockImplementation(() => ({\r\n                ...mockFamilyData,\r\n                save: jest.fn().mockResolvedValue(mockFamilyData)\r\n            }));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockBcrypt.hash).toHaveBeenCalledWith(validRegisterData.password, 12);\r\n            expect(mockUser.create).toHaveBeenCalled();\r\n            expect(mockJwt.sign).toHaveBeenCalledWith(\r\n                { userId: mockCreatedUser.id, role: mockCreatedUser.role },\r\n                'test_jwt_secret_key_for_guardian_grove_123'\r\n            );\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n        });\r\n\r\n        it('should register with existing family', async () => {\r\n            const mockFamilyData = testUtils.createMockFamily({\r\n                email: validRegisterData.email,\r\n                familyName: validRegisterData.familyName,\r\n                members: []\r\n            });\r\n            mockFamilyData.save = jest.fn().mockResolvedValue(mockFamilyData);\r\n\r\n            const mockCreatedUser = {\r\n                ...testUtils.createMockUser({\r\n                    ...validRegisterData,\r\n                    familyId: mockFamilyData._id\r\n                }),\r\n                id: '507f1f77bcf86cd799439011' // Add id property for JWT\r\n            };\r\n\r\n            mockFamily.findOne.mockResolvedValue(mockFamilyData as any);\r\n            mockUser.findOne.mockResolvedValue(null);\r\n            mockUser.create.mockResolvedValue(mockCreatedUser as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n        });\r\n\r\n        it('should return 400 if required fields are missing', async () => {\r\n            const incompleteData: Partial<typeof validRegisterData> = { ...validRegisterData };\r\n            delete incompleteData.name;\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: incompleteData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'All required fields must be filled.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if passwords do not match', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                confirmPassword: 'DifferentPass123!'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Passwords do not match'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if email format is invalid', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                email: 'invalid-email'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid email format.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if role is child', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                role: 'child'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Children must be added by a parent.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if role is invalid', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                role: 'invalid-role'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid role.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if interests is not an array', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                interests: 'not-an-array'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Interests must be an array.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if gender is invalid', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                gender: 'invalid-gender'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: \"Gender must be either 'male' or 'female'.\"\r\n            });\r\n        });\r\n\r\n        it('should return 400 if birthday format is invalid', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                birthday: 'invalid-date'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid birthday format.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if password does not meet requirements', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                password: 'weak',\r\n                confirmPassword: 'weak'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Password must be at least 8 characters long, include an uppercase letter, lowercase letter, a number, and a special character.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if family name is wrong for existing family', async () => {\r\n            const mockFamilyData = testUtils.createMockFamily({\r\n                email: validRegisterData.email,\r\n                familyName: 'Different Family Name'\r\n            });\r\n            mockFamily.findOne.mockResolvedValue(mockFamilyData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Wrong family name'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if member with same name exists in family', async () => {\r\n            const mockFamilyData = testUtils.createMockFamily({\r\n                email: validRegisterData.email,\r\n                familyName: validRegisterData.familyName\r\n            });\r\n            const existingUser = testUtils.createMockUser({\r\n                name: validRegisterData.name,\r\n                familyId: mockFamilyData._id\r\n            });\r\n\r\n            mockFamily.findOne.mockResolvedValue(mockFamilyData as any);\r\n            mockUser.findOne.mockResolvedValue(existingUser as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'A member with this name already exists in the family.'\r\n            });\r\n        });\r\n\r\n        it('should handle database errors gracefully', async () => {\r\n            mockFamily.findOne.mockRejectedValue(new Error('Database connection failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Something went wrong while registering.'\r\n            });\r\n        });\r\n    });\r\n\r\n    \r\n    // 3. test forgetPassword API\r\n    describe('forgetPassword', () => {\r\n        const validForgetPasswordData = {\r\n            name: 'Test User',\r\n            email: 'test@example.com'\r\n        };\r\n\r\n        it('should send temporary password successfully', async () => {\r\n            const mockUserData = testUtils.createMockUser(validForgetPasswordData);\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockUser.findOne).toHaveBeenCalledWith({\r\n                email: validForgetPasswordData.email,\r\n                name: validForgetPasswordData.name\r\n            });\r\n            expect(mockGenerateSecurePassword.generateSecurePassword).toHaveBeenCalled();\r\n            expect(mockBcrypt.hash).toHaveBeenCalledWith('TempPass123!', 12);\r\n            expect(mockUserData.isTempPassword).toBe(true);\r\n            expect(mockUserData.passwordChangedAt).toBeDefined();\r\n            expect(mockEmailService.sendMail).toHaveBeenCalledWith(\r\n                expect.stringContaining('Guardian Grove'),\r\n                validForgetPasswordData.email,\r\n                'Your Temporary Password',\r\n                expect.stringContaining('TempPass123!')\r\n            );\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n            expect(mockRes.send).toHaveBeenCalledWith({\r\n                message: 'Temporary password sent to your email.'\r\n            });\r\n        });\r\n\r\n        it('should return 404 if user not found', async () => {\r\n            mockUser.findOne.mockResolvedValue(null);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(404);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid credentials. User not found.'\r\n            });\r\n        });\r\n\r\n        it('should handle email service errors gracefully', async () => {\r\n            const mockUserData = testUtils.createMockUser(validForgetPasswordData);\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            mockEmailService.sendMail.mockRejectedValue(new Error('Email service failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Error sending temporary password.'\r\n            });\r\n        });\r\n\r\n        it('should handle database save errors gracefully', async () => {\r\n            const mockUserData = testUtils.createMockUser(validForgetPasswordData);\r\n            mockUserData.save = jest.fn().mockRejectedValue(new Error('Database save failed'));\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Error sending temporary password.'\r\n            });\r\n        });\r\n\r\n        it('should handle password hashing errors gracefully', async () => {\r\n            const mockUserData = testUtils.createMockUser(validForgetPasswordData);\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.hash as jest.Mock).mockRejectedValue(new Error('Hashing failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Error sending temporary password.'\r\n            });\r\n        });\r\n\r\n        it('should generate proper email HTML content', async () => {\r\n            const mockUserData = testUtils.createMockUser({\r\n                ...validForgetPasswordData,\r\n                name: 'John Doe'\r\n            });\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockEmailService.sendMail).toHaveBeenCalledWith(\r\n                expect.any(String),\r\n                validForgetPasswordData.email,\r\n                'Your Temporary Password',\r\n                expect.stringMatching(/Hello John Doe/)\r\n            );\r\n            expect(mockEmailService.sendMail).toHaveBeenCalledWith(\r\n                expect.any(String),\r\n                validForgetPasswordData.email,\r\n                'Your Temporary Password',\r\n                expect.stringMatching(/TempPass123!/)\r\n            );\r\n            expect(mockEmailService.sendMail).toHaveBeenCalledWith(\r\n                expect.any(String),\r\n                validForgetPasswordData.email,\r\n                'Your Temporary Password',\r\n                expect.stringMatching(/Guardian Grove Team/)\r\n            );\r\n        });\r\n\r\n        it('should set correct user properties after password reset', async () => {\r\n            const mockUserData = testUtils.createMockUser({\r\n                ...validForgetPasswordData,\r\n                isTempPassword: false,\r\n                passwordChangedAt: new Date('2024-01-01')\r\n            });\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockUserData.password).toBe('hashedPassword');\r\n            expect(mockUserData.isTempPassword).toBe(true);\r\n            expect(mockUserData.passwordChangedAt).toBeInstanceOf(Date);\r\n            expect(mockUserData.save).toHaveBeenCalled();\r\n        });\r\n    });\r\n});"],"version":3}