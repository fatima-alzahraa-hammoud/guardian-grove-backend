{"file":"C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\tests\\setup.ts","mappings":"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","names":[],"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\tests\\setup.ts"],"sourcesContent":["// Global test setup for Guardian Grove project\r\nimport { config } from 'dotenv';\r\n\r\n// Load test environment variables from .env.test\r\nconfig({ path: '.env.test' });\r\n\r\n// Set test timeout (10 seconds for database operations)\r\njest.setTimeout(10000);\r\n\r\n// Global cleanup after each test\r\nafterEach(() => {\r\n    jest.clearAllMocks();\r\n});\r\n\r\n// Set required environment variables for your app\r\nprocess.env.NODE_ENV = 'test';\r\n\r\n// Ensure these are set even if .env.test is missing some values\r\nif (!process.env.JWT_SECRET) {\r\n    process.env.JWT_SECRET = 'test-jwt-secret-fallback';\r\n}\r\nif (!process.env.EMAIL_USERNAME) {\r\n    process.env.EMAIL_USERNAME = 'test@guardiangrove.com';\r\n}\r\nif (!process.env.EMAIL_PASSWORD) {\r\n    process.env.EMAIL_PASSWORD = 'test-password';\r\n}\r\nif (!process.env.MONGO_URI) {\r\n    process.env.MONGO_URI = 'mongodb://localhost:27017/guardian_grove_test';\r\n}\r\nif (!process.env.PORT) {\r\n    process.env.PORT = '3001';\r\n}\r\n\r\n// Export test utilities\r\nexport const testUtils = {\r\n    // Create mock Express request object\r\n    createMockRequest: (overrides = {}) => ({\r\n        body: {},\r\n        params: {},\r\n        query: {},\r\n        headers: {},\r\n        user: null,\r\n        ...overrides,\r\n    }),\r\n    \r\n    // Create mock Express response object with all methods your controllers use\r\n    createMockResponse: () => {\r\n        const res: any = {};\r\n        res.status = jest.fn().mockReturnValue(res);\r\n        res.json = jest.fn().mockReturnValue(res);\r\n        res.send = jest.fn().mockReturnValue(res);\r\n        res.cookie = jest.fn().mockReturnValue(res);\r\n        res.clearCookie = jest.fn().mockReturnValue(res);\r\n        res.redirect = jest.fn().mockReturnValue(res);\r\n        return res;\r\n    },\r\n\r\n    // Create mock user based on your actual User model structure\r\n    createMockUser: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439011',\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        isTempPassword: false,\r\n        passwordChangedAt: new Date('2024-01-01'),\r\n        password: 'hashedPassword123',\r\n        birthday: new Date('1990-01-01'),\r\n        dailyMessage: 'You are shiningðŸ’«!',\r\n        gender: 'male',\r\n        role: 'parent',\r\n        avatar: '/assets/images/avatars/parent/avatar1.png',\r\n        interests: ['reading', 'sports'],\r\n        memberSince: new Date('2024-01-01'),\r\n        currentLocation: 'not specified',\r\n        stars: 100,\r\n        coins: 50,\r\n        nbOfTasksCompleted: 5,\r\n        rankInFamily: 1,\r\n        familyId: '507f1f77bcf86cd799439012',\r\n        // Arrays based on your schema\r\n        adventures: [],\r\n        achievements: [],\r\n        purchasedItems: [],\r\n        notifications: [],\r\n        notes: [],\r\n        goals: [],\r\n        books: [],\r\n        drawings: [],\r\n        colorings: [],\r\n        personalStories: [],\r\n        // Mock Mongoose methods\r\n        save: jest.fn().mockResolvedValue(true),\r\n        toJSON: jest.fn(),\r\n        equals: jest.fn((id: any) => id === '507f1f77bcf86cd799439011'),\r\n        ...overrides\r\n    }),\r\n\r\n    // Create mock family based on your Family model\r\n    createMockFamily: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439012',\r\n        email: 'family@example.com',\r\n        members: [],\r\n        totalStars: 500,\r\n        familyName: 'Test Family',\r\n        // Mock Mongoose methods\r\n        save: jest.fn().mockResolvedValue(true),\r\n        ...overrides\r\n    }),\r\n\r\n    // Create mock adventure based on your Adventure model\r\n    createMockAdventure: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439015',\r\n        title: 'Test Adventure',\r\n        description: 'A test adventure',\r\n        challenges: [\r\n        {\r\n            _id: '507f1f77bcf86cd799439016',\r\n            title: 'Test Challenge',\r\n            description: 'A test challenge',\r\n            starsReward: 10,\r\n            coinsReward: 5,\r\n            equals: jest.fn((id: any) => id === '507f1f77bcf86cd799439016')\r\n        }\r\n        ],\r\n        starsReward: 100,\r\n        coinsReward: 50,\r\n        difficulty: 'easy',\r\n        category: 'learning',\r\n        ...overrides\r\n    }),\r\n\r\n    // Valid MongoDB ObjectId for testing (24 character hex string)\r\n    validObjectId: '507f1f77bcf86cd799439011',\r\n    \r\n    // Invalid ObjectId for testing error cases\r\n    invalidObjectId: 'invalid-id-format',\r\n\r\n    // Helper functions for nested schema objects\r\n    createMockAdventureProgress: (overrides = {}) => ({\r\n        adventureId: '507f1f77bcf86cd799439015',\r\n        challenges: [],\r\n        isAdventureCompleted: false,\r\n        status: 'in-progress',\r\n        progress: 0,\r\n        starsReward: 10,\r\n        coinsReward: 5,\r\n        ...overrides\r\n    }),\r\n\r\n    createMockChallengeProgress: (overrides = {}) => ({\r\n        challengeId: '507f1f77bcf86cd799439016',\r\n        isCompleted: false,\r\n        completedAt: undefined,\r\n        ...overrides\r\n    }),\r\n\r\n    createMockPurchasedItem: (overrides = {}) => ({\r\n        itemId: '507f1f77bcf86cd799439017',\r\n        purchasedAt: new Date(),\r\n        ...overrides\r\n    }),\r\n\r\n    createMockNote: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439018',\r\n        title: 'Test Note',\r\n        content: 'This is a test note content',\r\n        type: 'personal',\r\n        isPinned: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        ...overrides\r\n    }),\r\n\r\n    createMockNotification: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439019',\r\n        title: 'Test Notification',\r\n        message: 'This is a test notification',\r\n        type: 'info',\r\n        isRead: false,\r\n        createdAt: new Date(),\r\n        ...overrides\r\n    })\r\n};"],"version":3}