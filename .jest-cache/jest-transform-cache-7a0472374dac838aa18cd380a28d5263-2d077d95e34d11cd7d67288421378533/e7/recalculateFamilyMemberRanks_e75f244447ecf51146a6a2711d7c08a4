02990314a099a745044af490bca10a76
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.recalculateFamilyMemberRanks = void 0;
const user_model_1 = require("../models/user.model");
// Helper function to recalculate ranks within the family
const recalculateFamilyMemberRanks = (familyId, updatedUser) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const familyMembers = yield user_model_1.User.find({ familyId })
            .sort({ stars: -1, nbOfTasksCompleted: -1 })
            .exec();
        let rank = 0;
        let prevStars = 0;
        let prevTasks = 0;
        const savePromises = familyMembers.map((member, index) => {
            if (prevStars !== member.stars || prevTasks !== member.nbOfTasksCompleted) {
                rank++;
            }
            member.rankInFamily = rank;
            // Update req.user directly if it's the same member
            if (updatedUser._id.equals(member._id)) {
                updatedUser.rankInFamily = rank;
            }
            prevStars = member.stars;
            prevTasks = member.nbOfTasksCompleted;
            return member.save(); // Save all members
        });
        yield Promise.all(savePromises); // Save all members in parallel
    }
    catch (error) {
        console.error("Error recalculating ranks:", error);
    }
});
exports.recalculateFamilyMemberRanks = recalculateFamilyMemberRanks;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxVU0VSXFxEZXNrdG9wXFxndWFyZGlhbi1ncm92ZVxcZ3VhcmRpYW4tZ3JvdmUtYmFja2VuZFxcc3JjXFx1dGlsc1xccmVjYWxjdWxhdGVGYW1pbHlNZW1iZXJSYW5rcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFDQSxxREFBNEM7QUFHNUMseURBQXlEO0FBQ2xELE1BQU0sNEJBQTRCLEdBQUcsQ0FBTyxRQUF3QixFQUFFLFdBQWtCLEVBQWlCLEVBQUU7SUFDOUcsSUFBSSxDQUFDO1FBQ0QsTUFBTSxhQUFhLEdBQUcsTUFBTSxpQkFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLFFBQVEsRUFBRSxDQUFDO2FBQzlDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQzNDLElBQUksRUFBRSxDQUFDO1FBRVosSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQztRQUVsQixNQUFNLFlBQVksR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3JELElBQUksU0FBUyxLQUFLLE1BQU0sQ0FBQyxLQUFLLElBQUksU0FBUyxLQUFLLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2dCQUN4RSxJQUFJLEVBQUUsQ0FBQztZQUNYLENBQUM7WUFFRCxNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUUzQixtREFBbUQ7WUFDbkQsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDckMsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFDcEMsQ0FBQztZQUVELFNBQVMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ3pCLFNBQVMsR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUM7WUFFdEMsT0FBTyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBRSxtQkFBbUI7UUFDOUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBRSwrQkFBK0I7SUFDckUsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7QUFDTCxDQUFDLENBQUEsQ0FBQztBQWhDVyxRQUFBLDRCQUE0QixnQ0FnQ3ZDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVVNFUlxcRGVza3RvcFxcZ3VhcmRpYW4tZ3JvdmVcXGd1YXJkaWFuLWdyb3ZlLWJhY2tlbmRcXHNyY1xcdXRpbHNcXHJlY2FsY3VsYXRlRmFtaWx5TWVtYmVyUmFua3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZXMgfSBmcm9tIFwibW9uZ29vc2VcIjtcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9tb2RlbHMvdXNlci5tb2RlbFwiO1xyXG5pbXBvcnQgeyBJVXNlciB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL0lVc2VyXCI7XHJcblxyXG4vLyBIZWxwZXIgZnVuY3Rpb24gdG8gcmVjYWxjdWxhdGUgcmFua3Mgd2l0aGluIHRoZSBmYW1pbHlcclxuZXhwb3J0IGNvbnN0IHJlY2FsY3VsYXRlRmFtaWx5TWVtYmVyUmFua3MgPSBhc3luYyAoZmFtaWx5SWQ6IFR5cGVzLk9iamVjdElkLCB1cGRhdGVkVXNlcjogSVVzZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZmFtaWx5TWVtYmVycyA9IGF3YWl0IFVzZXIuZmluZCh7IGZhbWlseUlkIH0pXHJcbiAgICAgICAgICAgIC5zb3J0KHsgc3RhcnM6IC0xLCBuYk9mVGFza3NDb21wbGV0ZWQ6IC0xIH0pXHJcbiAgICAgICAgICAgIC5leGVjKCk7XHJcblxyXG4gICAgICAgIGxldCByYW5rID0gMDtcclxuICAgICAgICBsZXQgcHJldlN0YXJzID0gMDtcclxuICAgICAgICBsZXQgcHJldlRhc2tzID0gMDtcclxuXHJcbiAgICAgICAgY29uc3Qgc2F2ZVByb21pc2VzID0gZmFtaWx5TWVtYmVycy5tYXAoKG1lbWJlciwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHByZXZTdGFycyAhPT0gbWVtYmVyLnN0YXJzIHx8IHByZXZUYXNrcyAhPT0gbWVtYmVyLm5iT2ZUYXNrc0NvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmFuaysrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtZW1iZXIucmFua0luRmFtaWx5ID0gcmFuaztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSByZXEudXNlciBkaXJlY3RseSBpZiBpdCdzIHRoZSBzYW1lIG1lbWJlclxyXG4gICAgICAgICAgICBpZiAodXBkYXRlZFVzZXIuX2lkLmVxdWFscyhtZW1iZXIuX2lkKSkge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlZFVzZXIucmFua0luRmFtaWx5ID0gcmFuaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcHJldlN0YXJzID0gbWVtYmVyLnN0YXJzO1xyXG4gICAgICAgICAgICBwcmV2VGFza3MgPSBtZW1iZXIubmJPZlRhc2tzQ29tcGxldGVkO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG1lbWJlci5zYXZlKCk7ICAvLyBTYXZlIGFsbCBtZW1iZXJzXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHNhdmVQcm9taXNlcyk7ICAvLyBTYXZlIGFsbCBtZW1iZXJzIGluIHBhcmFsbGVsXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciByZWNhbGN1bGF0aW5nIHJhbmtzOlwiLCBlcnJvcik7XHJcbiAgICB9XHJcbn07Il0sInZlcnNpb24iOjN9