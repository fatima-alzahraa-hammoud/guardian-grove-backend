{"file":"C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\src\\utils\\recalculateFamilyMemberRanks.ts","mappings":";;;;;;;;;;;;AACA,qDAA4C;AAG5C,yDAAyD;AAClD,MAAM,4BAA4B,GAAG,CAAO,QAAwB,EAAE,WAAkB,EAAiB,EAAE;IAC9G,IAAI,CAAC;QACD,MAAM,aAAa,GAAG,MAAM,iBAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC;aAC9C,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,kBAAkB,EAAE,CAAC,CAAC,EAAE,CAAC;aAC3C,IAAI,EAAE,CAAC;QAEZ,IAAI,IAAI,GAAG,CAAC,CAAC;QACb,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,SAAS,GAAG,CAAC,CAAC;QAElB,MAAM,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACrD,IAAI,SAAS,KAAK,MAAM,CAAC,KAAK,IAAI,SAAS,KAAK,MAAM,CAAC,kBAAkB,EAAE,CAAC;gBACxE,IAAI,EAAE,CAAC;YACX,CAAC;YAED,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;YAE3B,mDAAmD;YACnD,IAAI,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC;gBACrC,WAAW,CAAC,YAAY,GAAG,IAAI,CAAC;YACpC,CAAC;YAED,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;YACzB,SAAS,GAAG,MAAM,CAAC,kBAAkB,CAAC;YAEtC,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC,CAAE,mBAAmB;QAC9C,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAE,+BAA+B;IACrE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAAC;IACvD,CAAC;AACL,CAAC,CAAA,CAAC;AAhCW,QAAA,4BAA4B,gCAgCvC","names":[],"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\src\\utils\\recalculateFamilyMemberRanks.ts"],"sourcesContent":["import { Types } from \"mongoose\";\r\nimport { User } from \"../models/user.model\";\r\nimport { IUser } from \"../interfaces/IUser\";\r\n\r\n// Helper function to recalculate ranks within the family\r\nexport const recalculateFamilyMemberRanks = async (familyId: Types.ObjectId, updatedUser: IUser): Promise<void> => {\r\n    try {\r\n        const familyMembers = await User.find({ familyId })\r\n            .sort({ stars: -1, nbOfTasksCompleted: -1 })\r\n            .exec();\r\n\r\n        let rank = 0;\r\n        let prevStars = 0;\r\n        let prevTasks = 0;\r\n\r\n        const savePromises = familyMembers.map((member, index) => {\r\n            if (prevStars !== member.stars || prevTasks !== member.nbOfTasksCompleted) {\r\n                rank++;\r\n            }\r\n\r\n            member.rankInFamily = rank;\r\n            \r\n            // Update req.user directly if it's the same member\r\n            if (updatedUser._id.equals(member._id)) {\r\n                updatedUser.rankInFamily = rank;\r\n            }\r\n\r\n            prevStars = member.stars;\r\n            prevTasks = member.nbOfTasksCompleted;\r\n\r\n            return member.save();  // Save all members\r\n        });\r\n\r\n        await Promise.all(savePromises);  // Save all members in parallel\r\n    } catch (error) {\r\n        console.error(\"Error recalculating ranks:\", error);\r\n    }\r\n};"],"version":3}