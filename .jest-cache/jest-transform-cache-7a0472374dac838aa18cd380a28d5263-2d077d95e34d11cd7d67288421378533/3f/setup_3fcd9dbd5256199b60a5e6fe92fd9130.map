{"file":"C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\tests\\setup.ts","mappings":"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","names":[],"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\tests\\setup.ts"],"sourcesContent":["// Optimized test setup for Guardian Grove project\r\nimport { config } from 'dotenv';\r\n\r\n// Load test environment variables from .env.test\r\nconfig({ path: '.env.test' });\r\n\r\n// PERFORMANCE OPTIMIZATION: Reduce timeout for faster feedback\r\njest.setTimeout(5000); // Reduced from 10000ms\r\n\r\n// Set test environment\r\nprocess.env.NODE_ENV = 'test';\r\n\r\n// OPTIMIZATION: Set all required environment variables upfront\r\nconst requiredEnvVars = {\r\n    JWT_SECRET: 'test-jwt-secret-fallback',\r\n    EMAIL_USERNAME: 'test@guardiangrove.com',\r\n    EMAIL_PASSWORD: 'test-password',\r\n    MONGO_URI: 'mongodb://localhost:27017/guardian_grove_test',\r\n    PORT: '3001',\r\n    // Add other required vars to avoid runtime checks\r\n    CLOUDINARY_CLOUD_NAME: 'test_cloud',\r\n    CLOUDINARY_API_KEY: 'test_key',\r\n    CLOUDINARY_API_SECRET: 'test_secret',\r\n    OPENAI_API_KEY: 'test_openai_key',\r\n    ELEVEN_LABS_API_KEY: 'test_eleven_key',\r\n    VOICE_ID: 'test_voice_id'\r\n};\r\n\r\n// Set all env vars at once\r\nObject.entries(requiredEnvVars).forEach(([key, value]) => {\r\n    if (!process.env[key]) {\r\n        process.env[key] = value;\r\n    }\r\n});\r\n\r\n// OPTIMIZATION: Create reusable mock factories with pre-computed values\r\nconst createReusableMocks = () => {\r\n    // Pre-generate common IDs to avoid recreation\r\n    const commonIds = {\r\n        user: '507f1f77bcf86cd799439011',\r\n        family: '507f1f77bcf86cd799439012',\r\n        adventure: '507f1f77bcf86cd799439015',\r\n        challenge: '507f1f77bcf86cd799439016',\r\n        item: '507f1f77bcf86cd799439017',\r\n        note: '507f1f77bcf86cd799439018',\r\n        notification: '507f1f77bcf86cd799439019'\r\n    };\r\n\r\n    // Pre-create common dates\r\n    const commonDates = {\r\n        past: new Date('2024-01-01'),\r\n        recent: new Date('2024-06-01'),\r\n        now: new Date()\r\n    };\r\n\r\n    return {\r\n        ids: commonIds,\r\n        dates: commonDates,\r\n        \r\n        // Optimized mock creators with minimal object creation\r\n        mockRequest: (overrides = {}) => ({\r\n            body: {},\r\n            params: {},\r\n            query: {},\r\n            headers: {},\r\n            user: null,\r\n            ...overrides,\r\n        }),\r\n        \r\n        mockResponse: () => {\r\n            const res: any = {};\r\n            res.status = jest.fn().mockReturnValue(res);\r\n            res.json = jest.fn().mockReturnValue(res);\r\n            res.send = jest.fn().mockReturnValue(res);\r\n            res.cookie = jest.fn().mockReturnValue(res);\r\n            res.clearCookie = jest.fn().mockReturnValue(res);\r\n            res.redirect = jest.fn().mockReturnValue(res);\r\n            return res;\r\n        },\r\n\r\n        // Base user template - clone and modify as needed\r\n        baseUser: {\r\n            _id: commonIds.user,\r\n            name: 'Test User',\r\n            email: 'test@example.com',\r\n            isTempPassword: false,\r\n            passwordChangedAt: commonDates.past,\r\n            password: 'hashedPassword123',\r\n            birthday: new Date('1990-01-01'),\r\n            dailyMessage: 'You are shiningðŸ’«!',\r\n            gender: 'male',\r\n            role: 'parent',\r\n            avatar: '/assets/images/avatars/parent/avatar1.png',\r\n            interests: ['reading', 'sports'],\r\n            memberSince: commonDates.past,\r\n            currentLocation: 'not specified',\r\n            stars: 100,\r\n            coins: 50,\r\n            nbOfTasksCompleted: 5,\r\n            rankInFamily: 1,\r\n            familyId: commonIds.family,\r\n            adventures: [],\r\n            achievements: [],\r\n            purchasedItems: [],\r\n            notifications: [],\r\n            notes: [],\r\n            goals: [],\r\n            books: [],\r\n            drawings: [],\r\n            colorings: [],\r\n            personalStories: [],\r\n            save: jest.fn().mockResolvedValue(true),\r\n            toJSON: jest.fn(),\r\n            equals: jest.fn((id: any) => id === commonIds.user),\r\n        },\r\n\r\n        // Quick user creator using spread\r\n        createUser: (overrides = {}) => ({\r\n            ...createReusableMocks().baseUser,\r\n            ...overrides\r\n        })\r\n    };\r\n};\r\n\r\n// Create singleton instance\r\nconst mocks = createReusableMocks();\r\n\r\n// Global cleanup - optimized to avoid unnecessary work\r\nafterEach(() => {\r\n    // Only clear mocks that were actually used\r\n    jest.clearAllMocks();\r\n    \r\n    // OPTIMIZATION: Don't clear timers unless needed\r\n    // jest.clearAllTimers(); // Only add if you use timers\r\n});\r\n\r\n// OPTIMIZATION: Global beforeAll for one-time setup\r\nbeforeAll(() => {\r\n    // Any expensive one-time setup goes here\r\n    console.log('Test suite starting...');\r\n});\r\n\r\n// OPTIMIZATION: Global afterAll for cleanup\r\nafterAll(() => {\r\n    // Clean up any global resources\r\n    console.log('Test suite completed');\r\n});\r\n\r\n// Export optimized test utilities\r\nexport const testUtils = {\r\n    // Re-export the optimized mocks\r\n    ...mocks,\r\n    \r\n    // Legacy compatibility - these create new objects each time (slower)\r\n    createMockRequest: mocks.mockRequest,\r\n    createMockResponse: mocks.mockResponse,\r\n    createMockUser: mocks.createUser,\r\n    \r\n    // Fast mock creators using base templates\r\n    createMockFamily: (overrides = {}) => ({\r\n        _id: mocks.ids.family,\r\n        email: 'family@example.com',\r\n        members: [],\r\n        totalStars: 500,\r\n        familyName: 'Test Family',\r\n        save: jest.fn().mockResolvedValue(true),\r\n        ...overrides\r\n    }),\r\n\r\n    createMockAdventure: (overrides = {}) => ({\r\n        _id: mocks.ids.adventure,\r\n        title: 'Test Adventure',\r\n        description: 'A test adventure',\r\n        challenges: [{\r\n            _id: mocks.ids.challenge,\r\n            title: 'Test Challenge',\r\n            description: 'A test challenge',\r\n            starsReward: 10,\r\n            coinsReward: 5,\r\n            equals: jest.fn((id: any) => id === mocks.ids.challenge)\r\n        }],\r\n        starsReward: 100,\r\n        coinsReward: 50,\r\n        difficulty: 'easy',\r\n        category: 'learning',\r\n        ...overrides\r\n    }),\r\n\r\n    // Common test data\r\n    validObjectId: mocks.ids.user,\r\n    invalidObjectId: 'invalid-id-format',\r\n\r\n    // Helper to create multiple users quickly\r\n    createUsers: (count: number, baseOverrides = {}) => \r\n        Array.from({ length: count }, (_, i) => mocks.createUser({\r\n            _id: `507f1f77bcf86cd79943901${i}`,\r\n            email: `test${i}@example.com`,\r\n            name: `Test User ${i}`,\r\n            ...baseOverrides\r\n        })),\r\n\r\n    // Quick test data generators\r\n    createMockAdventureProgress: (overrides = {}) => ({\r\n        adventureId: mocks.ids.adventure,\r\n        challenges: [],\r\n        isAdventureCompleted: false,\r\n        status: 'in-progress',\r\n        progress: 0,\r\n        starsReward: 10,\r\n        coinsReward: 5,\r\n        ...overrides\r\n    }),\r\n\r\n    createMockChallengeProgress: (overrides = {}) => ({\r\n        challengeId: mocks.ids.challenge,\r\n        isCompleted: false,\r\n        completedAt: undefined,\r\n        ...overrides\r\n    }),\r\n\r\n    createMockPurchasedItem: (overrides = {}) => ({\r\n        itemId: mocks.ids.item,\r\n        purchasedAt: mocks.dates.now,\r\n        ...overrides\r\n    }),\r\n\r\n    createMockNote: (overrides = {}) => ({\r\n        _id: mocks.ids.note,\r\n        title: 'Test Note',\r\n        content: 'This is a test note content',\r\n        type: 'personal',\r\n        isPinned: false,\r\n        createdAt: mocks.dates.now,\r\n        updatedAt: mocks.dates.now,\r\n        ...overrides\r\n    }),\r\n\r\n    createMockNotification: (overrides = {}) => ({\r\n        _id: mocks.ids.notification,\r\n        title: 'Test Notification',\r\n        message: 'This is a test notification',\r\n        type: 'info',\r\n        isRead: false,\r\n        createdAt: mocks.dates.now,\r\n        ...overrides\r\n    })\r\n};"],"version":3}