d7273c0fddeffffc79ed90260087aa66
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.testUtils = void 0;
// Optimized test setup for Guardian Grove project
const dotenv_1 = require("dotenv");
// Load test environment variables from .env.test
(0, dotenv_1.config)({ path: '.env.test' });
// PERFORMANCE OPTIMIZATION: Reduce timeout for faster feedback
jest.setTimeout(5000); // Reduced from 10000ms
// Set test environment
process.env.NODE_ENV = 'test';
// OPTIMIZATION: Set all required environment variables upfront
const requiredEnvVars = {
    JWT_SECRET: 'test-jwt-secret-fallback',
    EMAIL_USERNAME: 'test@guardiangrove.com',
    EMAIL_PASSWORD: 'test-password',
    MONGO_URI: 'mongodb://localhost:27017/guardian_grove_test',
    PORT: '3001',
    // Add other required vars to avoid runtime checks
    CLOUDINARY_CLOUD_NAME: 'test_cloud',
    CLOUDINARY_API_KEY: 'test_key',
    CLOUDINARY_API_SECRET: 'test_secret',
    OPENAI_API_KEY: 'test_openai_key',
    ELEVEN_LABS_API_KEY: 'test_eleven_key',
    VOICE_ID: 'test_voice_id'
};
// Set all env vars at once
Object.entries(requiredEnvVars).forEach(([key, value]) => {
    if (!process.env[key]) {
        process.env[key] = value;
    }
});
// OPTIMIZATION: Create reusable mock factories with pre-computed values
const createReusableMocks = () => {
    // Pre-generate common IDs to avoid recreation
    const commonIds = {
        user: '507f1f77bcf86cd799439011',
        family: '507f1f77bcf86cd799439012',
        adventure: '507f1f77bcf86cd799439015',
        challenge: '507f1f77bcf86cd799439016',
        item: '507f1f77bcf86cd799439017',
        note: '507f1f77bcf86cd799439018',
        notification: '507f1f77bcf86cd799439019'
    };
    // Pre-create common dates
    const commonDates = {
        past: new Date('2024-01-01'),
        recent: new Date('2024-06-01'),
        now: new Date()
    };
    return {
        ids: commonIds,
        dates: commonDates,
        // Optimized mock creators with minimal object creation
        mockRequest: (overrides = {}) => (Object.assign({ body: {}, params: {}, query: {}, headers: {}, user: null }, overrides)),
        mockResponse: () => {
            const res = {};
            res.status = jest.fn().mockReturnValue(res);
            res.json = jest.fn().mockReturnValue(res);
            res.send = jest.fn().mockReturnValue(res);
            res.cookie = jest.fn().mockReturnValue(res);
            res.clearCookie = jest.fn().mockReturnValue(res);
            res.redirect = jest.fn().mockReturnValue(res);
            return res;
        },
        // Base user template - clone and modify as needed
        baseUser: {
            _id: commonIds.user,
            name: 'Test User',
            email: 'test@example.com',
            isTempPassword: false,
            passwordChangedAt: commonDates.past,
            password: 'hashedPassword123',
            birthday: new Date('1990-01-01'),
            dailyMessage: 'You are shiningðŸ’«!',
            gender: 'male',
            role: 'parent',
            avatar: '/assets/images/avatars/parent/avatar1.png',
            interests: ['reading', 'sports'],
            memberSince: commonDates.past,
            currentLocation: 'not specified',
            stars: 100,
            coins: 50,
            nbOfTasksCompleted: 5,
            rankInFamily: 1,
            familyId: commonIds.family,
            adventures: [],
            achievements: [],
            purchasedItems: [],
            notifications: [],
            notes: [],
            goals: [],
            books: [],
            drawings: [],
            colorings: [],
            personalStories: [],
            save: jest.fn().mockResolvedValue(true),
            toJSON: jest.fn(),
            equals: jest.fn((id) => id === commonIds.user),
        },
        // Quick user creator using spread
        createUser: (overrides = {}) => (Object.assign(Object.assign({}, createReusableMocks().baseUser), overrides))
    };
};
// Create singleton instance
const mocks = createReusableMocks();
// Global cleanup - optimized to avoid unnecessary work
afterEach(() => {
    // Only clear mocks that were actually used
    jest.clearAllMocks();
    // OPTIMIZATION: Don't clear timers unless needed
    // jest.clearAllTimers(); // Only add if you use timers
});
// OPTIMIZATION: Global beforeAll for one-time setup
beforeAll(() => {
    // Any expensive one-time setup goes here
    console.log('Test suite starting...');
});
// OPTIMIZATION: Global afterAll for cleanup
afterAll(() => {
    // Clean up any global resources
    console.log('Test suite completed');
});
// Export optimized test utilities
exports.testUtils = Object.assign(Object.assign({}, mocks), { 
    // Legacy compatibility - these create new objects each time (slower)
    createMockRequest: mocks.mockRequest, createMockResponse: mocks.mockResponse, createMockUser: mocks.createUser, 
    // Fast mock creators using base templates
    createMockFamily: (overrides = {}) => (Object.assign({ _id: mocks.ids.family, email: 'family@example.com', members: [], totalStars: 500, familyName: 'Test Family', save: jest.fn().mockResolvedValue(true) }, overrides)), createMockAdventure: (overrides = {}) => (Object.assign({ _id: mocks.ids.adventure, title: 'Test Adventure', description: 'A test adventure', challenges: [{
                _id: mocks.ids.challenge,
                title: 'Test Challenge',
                description: 'A test challenge',
                starsReward: 10,
                coinsReward: 5,
                equals: jest.fn((id) => id === mocks.ids.challenge)
            }], starsReward: 100, coinsReward: 50, difficulty: 'easy', category: 'learning' }, overrides)), 
    // Common test data
    validObjectId: mocks.ids.user, invalidObjectId: 'invalid-id-format', 
    // Helper to create multiple users quickly
    createUsers: (count, baseOverrides = {}) => Array.from({ length: count }, (_, i) => mocks.createUser(Object.assign({ _id: `507f1f77bcf86cd79943901${i}`, email: `test${i}@example.com`, name: `Test User ${i}` }, baseOverrides))), 
    // Quick test data generators
    createMockAdventureProgress: (overrides = {}) => (Object.assign({ adventureId: mocks.ids.adventure, challenges: [], isAdventureCompleted: false, status: 'in-progress', progress: 0, starsReward: 10, coinsReward: 5 }, overrides)), createMockChallengeProgress: (overrides = {}) => (Object.assign({ challengeId: mocks.ids.challenge, isCompleted: false, completedAt: undefined }, overrides)), createMockPurchasedItem: (overrides = {}) => (Object.assign({ itemId: mocks.ids.item, purchasedAt: mocks.dates.now }, overrides)), createMockNote: (overrides = {}) => (Object.assign({ _id: mocks.ids.note, title: 'Test Note', content: 'This is a test note content', type: 'personal', isPinned: false, createdAt: mocks.dates.now, updatedAt: mocks.dates.now }, overrides)), createMockNotification: (overrides = {}) => (Object.assign({ _id: mocks.ids.notification, title: 'Test Notification', message: 'This is a test notification', type: 'info', isRead: false, createdAt: mocks.dates.now }, overrides)) });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,