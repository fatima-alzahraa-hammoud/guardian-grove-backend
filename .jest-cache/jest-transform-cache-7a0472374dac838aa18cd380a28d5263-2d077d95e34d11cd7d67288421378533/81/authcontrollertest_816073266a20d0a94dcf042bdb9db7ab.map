{"version":3,"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\tests\\controllers\\auth.controller.test.ts"],"sourcesContent":["import { testUtils } from '../setup';\r\nimport { login, register, forgetPassword } from '../../src/controllers/auth.controller';\r\nimport { User } from '../../src/models/user.model';\r\nimport { Family } from '../../src/models/family.model';\r\nimport * as generateSecurePassword from '../../src/utils/generateSecurePassword';\r\nimport * as emailService from '../../src/services/email.service';\r\nimport * as bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Mock all dependencies\r\njest.mock('../../src/models/user.model');\r\njest.mock('../../src/models/family.model');\r\njest.mock('../../src/services/email.service');\r\njest.mock('../../src/utils/generateSecurePassword');\r\njest.mock('bcrypt');\r\njest.mock('jsonwebtoken');\r\n\r\nconst mockUser = User as jest.Mocked<typeof User>;\r\nconst mockFamily = Family as jest.Mocked<typeof Family>;\r\nconst mockGenerateSecurePassword = generateSecurePassword as jest.Mocked<typeof generateSecurePassword>;\r\nconst mockEmailService = emailService as jest.Mocked<typeof emailService>;\r\nconst mockBcrypt = bcrypt as jest.Mocked<typeof bcrypt>;\r\nconst mockJwt = jwt as jest.Mocked<typeof jwt>;\r\n\r\ndescribe('Auth Controller Tests', () => {\r\n    beforeEach(() => {\r\n        jest.clearAllMocks();\r\n        \r\n        // Setup User model methods\r\n        mockUser.findOne = jest.fn();\r\n        mockUser.create = jest.fn();\r\n\r\n        // Setup Family model methods\r\n        mockFamily.findOne = jest.fn();\r\n        \r\n        // Setup utility mocks\r\n        mockGenerateSecurePassword.generateSecurePassword.mockReturnValue('TempPass123!');\r\n        jest.spyOn(mockEmailService, 'sendMail').mockResolvedValue(undefined);\r\n        \r\n        (jest.spyOn(bcrypt, 'hash') as jest.Mock).mockResolvedValue('hashedPassword');\r\n        (jest.spyOn(bcrypt, 'compare') as jest.Mock).mockResolvedValue(true);\r\n        (jest.spyOn(jwt, 'sign') as jest.Mock).mockResolvedValue('mock-jwt-token');\r\n\r\n        // Set JWT_SECRET environment variable\r\n        process.env.JWT_SECRET = 'test_jwt_secret_key_for_guardian_grove_123';\r\n    });\r\n\r\n    afterEach(() => {\r\n        // Clean up environment variables if needed\r\n        if (!process.env.JWT_SECRET) {\r\n            process.env.JWT_SECRET = 'test_jwt_secret_key_for_guardian_grove_123';\r\n        }\r\n    });\r\n\r\n    // 1. test login API\r\n    describe('login', () => {\r\n        const validLoginData = {\r\n            name: 'Test User',\r\n            email: 'test@example.com',\r\n            password: 'TestPass123!'\r\n        };\r\n\r\n        it('should login successfully with valid credentials', async () => {\r\n            const mockUserData = {\r\n                ...testUtils.createMockUser({\r\n                    ...validLoginData,\r\n                    isTempPassword: false\r\n                }),\r\n                id: '507f1f77bcf86cd799439011' \r\n            };\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.compare as jest.Mock).mockResolvedValue(true);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockUser.findOne).toHaveBeenCalledWith({\r\n                name: validLoginData.name,\r\n                email: validLoginData.email\r\n            });\r\n            expect(mockBcrypt.compare).toHaveBeenCalledWith(validLoginData.password, mockUserData.password);\r\n            expect(mockJwt.sign).toHaveBeenCalledWith(\r\n                { userId: mockUserData.id, role: mockUserData.role },\r\n                'test_jwt_secret_key_for_guardian_grove_123'\r\n            );\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                user: mockUserData,\r\n                token: 'mock-jwt-token',\r\n                requiresPasswordChange: false,\r\n                message: 'Login successful'\r\n            });\r\n        });\r\n\r\n        it('should login with temporary password and require password change', async () => {\r\n            const mockUserData = {\r\n                ...testUtils.createMockUser({\r\n                    ...validLoginData,\r\n                    isTempPassword: true\r\n                }),\r\n                id: '507f1f77bcf86cd799439011' // Add id property for JWT\r\n            };\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.compare as jest.Mock).mockResolvedValue(true);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                user: mockUserData,\r\n                token: 'mock-jwt-token',\r\n                requiresPasswordChange: true,\r\n                message: 'Please set a new password'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if required fields are missing', async () => {\r\n            const incompleteData = { name: 'Test User', email: 'test@example.com' }; // Missing password\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: incompleteData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Name, email, and password are required.'\r\n            });\r\n        });\r\n\r\n        it('should return 404 if user not found', async () => {\r\n            mockUser.findOne.mockResolvedValue(null);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(404);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid credentials. User not found.'\r\n            });\r\n        });\r\n\r\n        it('should return 401 if password is incorrect', async () => {\r\n            const mockUserData = {\r\n                ...testUtils.createMockUser(validLoginData),\r\n                id: '507f1f77bcf86cd799439011'\r\n            };\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.compare as jest.Mock).mockResolvedValue(false);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(401);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid password.'\r\n            });\r\n        });\r\n\r\n        it('should handle JWT signing errors gracefully', async () => {\r\n            const mockUserData = {\r\n                ...testUtils.createMockUser(validLoginData),\r\n                id: '507f1f77bcf86cd799439011'\r\n            };\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.compare as jest.Mock).mockResolvedValue(true);\r\n            // Mock JWT sign to throw an error\r\n            (mockJwt.sign as jest.Mock).mockRejectedValue(new Error('JWT signing failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Something went wrong while logging in.'\r\n            });\r\n        });\r\n\r\n        it('should handle database errors gracefully', async () => {\r\n            mockUser.findOne.mockRejectedValue(new Error('Database connection failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validLoginData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await login(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Something went wrong while logging in.'\r\n            });\r\n        });\r\n    });\r\n\r\n    // 2. test register API\r\n    describe('register', () => {\r\n        const validRegisterData = {\r\n            name: 'Test Parent',\r\n            email: 'parent@example.com',\r\n            password: 'TestPass123!',\r\n            confirmPassword: 'TestPass123!',\r\n            birthday: '1985-01-01',\r\n            gender: 'male',\r\n            role: 'parent',\r\n            avatar: '/avatar.png',\r\n            interests: ['reading', 'sports'],\r\n            familyName: 'Test Family',\r\n            familyAvatar: '/family-avatar.png'\r\n        };\r\n\r\n        it('should register successfully with valid data', async () => {\r\n            const mockFamilyData = testUtils.createMockFamily({\r\n                email: validRegisterData.email,\r\n                familyName: validRegisterData.familyName,\r\n                members: []\r\n            });\r\n            const mockCreatedUser = {\r\n                ...testUtils.createMockUser({\r\n                    ...validRegisterData,\r\n                    familyId: mockFamilyData._id\r\n                }),\r\n                id: '507f1f77bcf86cd799439011' // Add id property for JWT\r\n            };\r\n\r\n            mockFamily.findOne.mockResolvedValue(null); // New family\r\n            mockFamily.prototype.save = jest.fn().mockResolvedValue(mockFamilyData);\r\n            mockUser.findOne.mockResolvedValue(null); // No existing user with same name\r\n            mockUser.create.mockResolvedValue(mockCreatedUser as any);\r\n\r\n            // Mock the Family constructor\r\n            (mockFamily as any).mockImplementation(() => ({\r\n                ...mockFamilyData,\r\n                save: jest.fn().mockResolvedValue(mockFamilyData)\r\n            }));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockBcrypt.hash).toHaveBeenCalledWith(validRegisterData.password, 12);\r\n            expect(mockUser.create).toHaveBeenCalled();\r\n            expect(mockJwt.sign).toHaveBeenCalledWith(\r\n                { userId: mockCreatedUser.id, role: mockCreatedUser.role },\r\n                'test_jwt_secret_key_for_guardian_grove_123'\r\n            );\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n        });\r\n\r\n        it('should register with existing family', async () => {\r\n            const mockFamilyData = testUtils.createMockFamily({\r\n                email: validRegisterData.email,\r\n                familyName: validRegisterData.familyName,\r\n                members: []\r\n            });\r\n            mockFamilyData.save = jest.fn().mockResolvedValue(mockFamilyData);\r\n\r\n            const mockCreatedUser = {\r\n                ...testUtils.createMockUser({\r\n                    ...validRegisterData,\r\n                    familyId: mockFamilyData._id\r\n                }),\r\n                id: '507f1f77bcf86cd799439011' // Add id property for JWT\r\n            };\r\n\r\n            mockFamily.findOne.mockResolvedValue(mockFamilyData as any);\r\n            mockUser.findOne.mockResolvedValue(null);\r\n            mockUser.create.mockResolvedValue(mockCreatedUser as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n        });\r\n\r\n        it('should return 400 if required fields are missing', async () => {\r\n            const incompleteData: Partial<typeof validRegisterData> = { ...validRegisterData };\r\n            delete incompleteData.name;\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: incompleteData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'All required fields must be filled.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if passwords do not match', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                confirmPassword: 'DifferentPass123!'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Passwords do not match'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if email format is invalid', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                email: 'invalid-email'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid email format.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if role is child', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                role: 'child'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Children must be added by a parent.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if role is invalid', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                role: 'invalid-role'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid role.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if interests is not an array', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                interests: 'not-an-array'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Interests must be an array.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if gender is invalid', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                gender: 'invalid-gender'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: \"Gender must be either 'male' or 'female'.\"\r\n            });\r\n        });\r\n\r\n        it('should return 400 if birthday format is invalid', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                birthday: 'invalid-date'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid birthday format.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if password does not meet requirements', async () => {\r\n            const invalidData = {\r\n                ...validRegisterData,\r\n                password: 'weak',\r\n                confirmPassword: 'weak'\r\n            };\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: invalidData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Password must be at least 8 characters long, include an uppercase letter, lowercase letter, a number, and a special character.'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if family name is wrong for existing family', async () => {\r\n            const mockFamilyData = testUtils.createMockFamily({\r\n                email: validRegisterData.email,\r\n                familyName: 'Different Family Name'\r\n            });\r\n            mockFamily.findOne.mockResolvedValue(mockFamilyData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Wrong family name'\r\n            });\r\n        });\r\n\r\n        it('should return 400 if member with same name exists in family', async () => {\r\n            const mockFamilyData = testUtils.createMockFamily({\r\n                email: validRegisterData.email,\r\n                familyName: validRegisterData.familyName\r\n            });\r\n            const existingUser = testUtils.createMockUser({\r\n                name: validRegisterData.name,\r\n                familyId: mockFamilyData._id\r\n            });\r\n\r\n            mockFamily.findOne.mockResolvedValue(mockFamilyData as any);\r\n            mockUser.findOne.mockResolvedValue(existingUser as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(400);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'A member with this name already exists in the family.'\r\n            });\r\n        });\r\n\r\n        it('should handle database errors gracefully', async () => {\r\n            mockFamily.findOne.mockRejectedValue(new Error('Database connection failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validRegisterData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await register(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Something went wrong while registering.'\r\n            });\r\n        });\r\n    });\r\n\r\n    \r\n    // 3. test forgetPassword API\r\n    describe('forgetPassword', () => {\r\n        const validForgetPasswordData = {\r\n            name: 'Test User',\r\n            email: 'test@example.com'\r\n        };\r\n\r\n        it('should send temporary password successfully', async () => {\r\n            const mockUserData = testUtils.createMockUser(validForgetPasswordData);\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockUser.findOne).toHaveBeenCalledWith({\r\n                email: validForgetPasswordData.email,\r\n                name: validForgetPasswordData.name\r\n            });\r\n            expect(mockGenerateSecurePassword.generateSecurePassword).toHaveBeenCalled();\r\n            expect(mockBcrypt.hash).toHaveBeenCalledWith('TempPass123!', 12);\r\n            expect(mockUserData.isTempPassword).toBe(true);\r\n            expect(mockUserData.passwordChangedAt).toBeDefined();\r\n            expect(mockEmailService.sendMail).toHaveBeenCalledWith(\r\n                expect.stringContaining('Guardian Grove'),\r\n                validForgetPasswordData.email,\r\n                'Your Temporary Password',\r\n                expect.stringContaining('TempPass123!')\r\n            );\r\n            expect(mockRes.status).toHaveBeenCalledWith(200);\r\n            expect(mockRes.send).toHaveBeenCalledWith({\r\n                message: 'Temporary password sent to your email.'\r\n            });\r\n        });\r\n\r\n        it('should return 404 if user not found', async () => {\r\n            mockUser.findOne.mockResolvedValue(null);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(404);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Invalid credentials. User not found.'\r\n            });\r\n        });\r\n\r\n        it('should handle email service errors gracefully', async () => {\r\n            const mockUserData = testUtils.createMockUser(validForgetPasswordData);\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            mockEmailService.sendMail.mockRejectedValue(new Error('Email service failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Error sending temporary password.'\r\n            });\r\n        });\r\n\r\n        it('should handle database save errors gracefully', async () => {\r\n            const mockUserData = testUtils.createMockUser(validForgetPasswordData);\r\n            mockUserData.save = jest.fn().mockRejectedValue(new Error('Database save failed'));\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Error sending temporary password.'\r\n            });\r\n        });\r\n\r\n        it('should handle password hashing errors gracefully', async () => {\r\n            const mockUserData = testUtils.createMockUser(validForgetPasswordData);\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n            (mockBcrypt.hash as jest.Mock).mockRejectedValue(new Error('Hashing failed'));\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockRes.status).toHaveBeenCalledWith(500);\r\n            expect(mockRes.json).toHaveBeenCalledWith({\r\n                error: 'Error sending temporary password.'\r\n            });\r\n        });\r\n\r\n        it('should generate proper email HTML content', async () => {\r\n            const mockUserData = testUtils.createMockUser({\r\n                ...validForgetPasswordData,\r\n                name: 'John Doe'\r\n            });\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockEmailService.sendMail).toHaveBeenCalledWith(\r\n                expect.any(String),\r\n                validForgetPasswordData.email,\r\n                'Your Temporary Password',\r\n                expect.stringMatching(/Hello John Doe/)\r\n            );\r\n            expect(mockEmailService.sendMail).toHaveBeenCalledWith(\r\n                expect.any(String),\r\n                validForgetPasswordData.email,\r\n                'Your Temporary Password',\r\n                expect.stringMatching(/TempPass123!/)\r\n            );\r\n            expect(mockEmailService.sendMail).toHaveBeenCalledWith(\r\n                expect.any(String),\r\n                validForgetPasswordData.email,\r\n                'Your Temporary Password',\r\n                expect.stringMatching(/Guardian Grove Team/)\r\n            );\r\n        });\r\n\r\n        it('should set correct user properties after password reset', async () => {\r\n            const mockUserData = testUtils.createMockUser({\r\n                ...validForgetPasswordData,\r\n                isTempPassword: false,\r\n                passwordChangedAt: new Date('2024-01-01')\r\n            });\r\n            mockUser.findOne.mockResolvedValue(mockUserData as any);\r\n\r\n            const mockReq = testUtils.createMockRequest({ body: validForgetPasswordData });\r\n            const mockRes = testUtils.createMockResponse();\r\n\r\n            await forgetPassword(mockReq as any, mockRes as any);\r\n\r\n            expect(mockUserData.password).toBe('hashedPassword');\r\n            expect(mockUserData.isTempPassword).toBe(true);\r\n            expect(mockUserData.passwordChangedAt).toBeInstanceOf(Date);\r\n            expect(mockUserData.save).toHaveBeenCalled();\r\n        });\r\n    });\r\n});"],"names":["jest","mock","mockUser","User","mockFamily","Family","mockGenerateSecurePassword","generateSecurePassword","mockEmailService","emailService","mockBcrypt","bcrypt","mockJwt","jwt","describe","beforeEach","clearAllMocks","findOne","fn","create","mockReturnValue","spyOn","mockResolvedValue","undefined","process","env","JWT_SECRET","afterEach","validLoginData","name","email","password","it","mockUserData","testUtils","createMockUser","isTempPassword","id","compare","mockReq","createMockRequest","body","mockRes","createMockResponse","login","expect","toHaveBeenCalledWith","sign","userId","role","status","json","user","token","requiresPasswordChange","message","incompleteData","error","mockRejectedValue","Error","validRegisterData","confirmPassword","birthday","gender","avatar","interests","familyName","familyAvatar","mockFamilyData","createMockFamily","members","mockCreatedUser","familyId","_id","prototype","save","mockImplementation","register","hash","toHaveBeenCalled","invalidData","existingUser","validForgetPasswordData","forgetPassword","toBe","passwordChangedAt","toBeDefined","sendMail","stringContaining","send","any","String","stringMatching","Date","toBeInstanceOf"],"mappings":"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"}