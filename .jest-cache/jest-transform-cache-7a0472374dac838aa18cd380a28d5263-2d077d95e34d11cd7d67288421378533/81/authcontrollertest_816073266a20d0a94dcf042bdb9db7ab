8b4bdf6550d6f591c7d82e290cdbc8b6
"use strict";
// Mock all dependencies
jest.mock('../../src/models/user.model');
jest.mock('../../src/models/family.model');
jest.mock('../../src/services/email.service');
jest.mock('../../src/utils/generateSecurePassword');
jest.mock('bcrypt');
jest.mock('jsonwebtoken');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _setup = require("../setup");
const _authcontroller = require("../../src/controllers/auth.controller");
const _usermodel = require("../../src/models/user.model");
const _familymodel = require("../../src/models/family.model");
const _generateSecurePassword = /*#__PURE__*/ _interop_require_wildcard(require("../../src/utils/generateSecurePassword"));
const _emailservice = /*#__PURE__*/ _interop_require_wildcard(require("../../src/services/email.service"));
const _bcrypt = /*#__PURE__*/ _interop_require_wildcard(require("bcrypt"));
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const mockUser = _usermodel.User;
const mockFamily = _familymodel.Family;
const mockGenerateSecurePassword = _generateSecurePassword;
const mockEmailService = _emailservice;
const mockBcrypt = _bcrypt;
const mockJwt = _jsonwebtoken.default;
describe('Auth Controller Tests', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Setup User model methods
        mockUser.findOne = jest.fn();
        mockUser.create = jest.fn();
        // Setup Family model methods
        mockFamily.findOne = jest.fn();
        // Setup utility mocks
        mockGenerateSecurePassword.generateSecurePassword.mockReturnValue('TempPass123!');
        jest.spyOn(mockEmailService, 'sendMail').mockResolvedValue(undefined);
        jest.spyOn(_bcrypt, 'hash').mockResolvedValue('hashedPassword');
        jest.spyOn(_bcrypt, 'compare').mockResolvedValue(true);
        jest.spyOn(_jsonwebtoken.default, 'sign').mockResolvedValue('mock-jwt-token');
        // Set JWT_SECRET environment variable
        process.env.JWT_SECRET = 'test_jwt_secret_key_for_guardian_grove_123';
    });
    afterEach(()=>{
        // Clean up environment variables if needed
        if (!process.env.JWT_SECRET) {
            process.env.JWT_SECRET = 'test_jwt_secret_key_for_guardian_grove_123';
        }
    });
    // 1. test login API
    describe('login', ()=>{
        const validLoginData = {
            name: 'Test User',
            email: 'test@example.com',
            password: 'TestPass123!'
        };
        it('should login successfully with valid credentials', async ()=>{
            const mockUserData = {
                ..._setup.testUtils.createMockUser({
                    ...validLoginData,
                    isTempPassword: false
                }),
                id: '507f1f77bcf86cd799439011'
            };
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.compare.mockResolvedValue(true);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validLoginData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.login)(mockReq, mockRes);
            expect(mockUser.findOne).toHaveBeenCalledWith({
                name: validLoginData.name,
                email: validLoginData.email
            });
            expect(mockBcrypt.compare).toHaveBeenCalledWith(validLoginData.password, mockUserData.password);
            expect(mockJwt.sign).toHaveBeenCalledWith({
                userId: mockUserData.id,
                role: mockUserData.role
            }, 'test_jwt_secret_key_for_guardian_grove_123');
            expect(mockRes.status).toHaveBeenCalledWith(200);
            expect(mockRes.json).toHaveBeenCalledWith({
                user: mockUserData,
                token: 'mock-jwt-token',
                requiresPasswordChange: false,
                message: 'Login successful'
            });
        });
        it('should login with temporary password and require password change', async ()=>{
            const mockUserData = {
                ..._setup.testUtils.createMockUser({
                    ...validLoginData,
                    isTempPassword: true
                }),
                id: '507f1f77bcf86cd799439011' // Add id property for JWT
            };
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.compare.mockResolvedValue(true);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validLoginData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(200);
            expect(mockRes.json).toHaveBeenCalledWith({
                user: mockUserData,
                token: 'mock-jwt-token',
                requiresPasswordChange: true,
                message: 'Please set a new password'
            });
        });
        it('should return 400 if required fields are missing', async ()=>{
            const incompleteData = {
                name: 'Test User',
                email: 'test@example.com'
            }; // Missing password
            const mockReq = _setup.testUtils.createMockRequest({
                body: incompleteData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Name, email, and password are required.'
            });
        });
        it('should return 404 if user not found', async ()=>{
            mockUser.findOne.mockResolvedValue(null);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validLoginData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(404);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid credentials. User not found.'
            });
        });
        it('should return 401 if password is incorrect', async ()=>{
            const mockUserData = {
                ..._setup.testUtils.createMockUser(validLoginData),
                id: '507f1f77bcf86cd799439011'
            };
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.compare.mockResolvedValue(false);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validLoginData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(401);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid password.'
            });
        });
        it('should handle JWT signing errors gracefully', async ()=>{
            const mockUserData = {
                ..._setup.testUtils.createMockUser(validLoginData),
                id: '507f1f77bcf86cd799439011'
            };
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.compare.mockResolvedValue(true);
            // Mock JWT sign to throw an error
            mockJwt.sign.mockRejectedValue(new Error('JWT signing failed'));
            const mockReq = _setup.testUtils.createMockRequest({
                body: validLoginData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Something went wrong while logging in.'
            });
        });
        it('should handle database errors gracefully', async ()=>{
            mockUser.findOne.mockRejectedValue(new Error('Database connection failed'));
            const mockReq = _setup.testUtils.createMockRequest({
                body: validLoginData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Something went wrong while logging in.'
            });
        });
    });
    // 2. test register API
    describe('register', ()=>{
        const validRegisterData = {
            name: 'Test Parent',
            email: 'parent@example.com',
            password: 'TestPass123!',
            confirmPassword: 'TestPass123!',
            birthday: '1985-01-01',
            gender: 'male',
            role: 'parent',
            avatar: '/avatar.png',
            interests: [
                'reading',
                'sports'
            ],
            familyName: 'Test Family',
            familyAvatar: '/family-avatar.png'
        };
        it('should register successfully with valid data', async ()=>{
            const mockFamilyData = _setup.testUtils.createMockFamily({
                email: validRegisterData.email,
                familyName: validRegisterData.familyName,
                members: []
            });
            const mockCreatedUser = {
                ..._setup.testUtils.createMockUser({
                    ...validRegisterData,
                    familyId: mockFamilyData._id
                }),
                id: '507f1f77bcf86cd799439011' // Add id property for JWT
            };
            mockFamily.findOne.mockResolvedValue(null); // New family
            mockFamily.prototype.save = jest.fn().mockResolvedValue(mockFamilyData);
            mockUser.findOne.mockResolvedValue(null); // No existing user with same name
            mockUser.create.mockResolvedValue(mockCreatedUser);
            // Mock the Family constructor
            mockFamily.mockImplementation(()=>({
                    ...mockFamilyData,
                    save: jest.fn().mockResolvedValue(mockFamilyData)
                }));
            const mockReq = _setup.testUtils.createMockRequest({
                body: validRegisterData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockBcrypt.hash).toHaveBeenCalledWith(validRegisterData.password, 12);
            expect(mockUser.create).toHaveBeenCalled();
            expect(mockJwt.sign).toHaveBeenCalledWith({
                userId: mockCreatedUser.id,
                role: mockCreatedUser.role
            }, 'test_jwt_secret_key_for_guardian_grove_123');
            expect(mockRes.status).toHaveBeenCalledWith(200);
        });
        it('should register with existing family', async ()=>{
            const mockFamilyData = _setup.testUtils.createMockFamily({
                email: validRegisterData.email,
                familyName: validRegisterData.familyName,
                members: []
            });
            mockFamilyData.save = jest.fn().mockResolvedValue(mockFamilyData);
            const mockCreatedUser = {
                ..._setup.testUtils.createMockUser({
                    ...validRegisterData,
                    familyId: mockFamilyData._id
                }),
                id: '507f1f77bcf86cd799439011' // Add id property for JWT
            };
            mockFamily.findOne.mockResolvedValue(mockFamilyData);
            mockUser.findOne.mockResolvedValue(null);
            mockUser.create.mockResolvedValue(mockCreatedUser);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validRegisterData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(200);
        });
        it('should return 400 if required fields are missing', async ()=>{
            const incompleteData = {
                ...validRegisterData
            };
            delete incompleteData.name;
            const mockReq = _setup.testUtils.createMockRequest({
                body: incompleteData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'All required fields must be filled.'
            });
        });
        it('should return 400 if passwords do not match', async ()=>{
            const invalidData = {
                ...validRegisterData,
                confirmPassword: 'DifferentPass123!'
            };
            const mockReq = _setup.testUtils.createMockRequest({
                body: invalidData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Passwords do not match'
            });
        });
        it('should return 400 if email format is invalid', async ()=>{
            const invalidData = {
                ...validRegisterData,
                email: 'invalid-email'
            };
            const mockReq = _setup.testUtils.createMockRequest({
                body: invalidData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid email format.'
            });
        });
        it('should return 400 if role is child', async ()=>{
            const invalidData = {
                ...validRegisterData,
                role: 'child'
            };
            const mockReq = _setup.testUtils.createMockRequest({
                body: invalidData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Children must be added by a parent.'
            });
        });
        it('should return 400 if role is invalid', async ()=>{
            const invalidData = {
                ...validRegisterData,
                role: 'invalid-role'
            };
            const mockReq = _setup.testUtils.createMockRequest({
                body: invalidData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid role.'
            });
        });
        it('should return 400 if interests is not an array', async ()=>{
            const invalidData = {
                ...validRegisterData,
                interests: 'not-an-array'
            };
            const mockReq = _setup.testUtils.createMockRequest({
                body: invalidData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Interests must be an array.'
            });
        });
        it('should return 400 if gender is invalid', async ()=>{
            const invalidData = {
                ...validRegisterData,
                gender: 'invalid-gender'
            };
            const mockReq = _setup.testUtils.createMockRequest({
                body: invalidData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: "Gender must be either 'male' or 'female'."
            });
        });
        it('should return 400 if birthday format is invalid', async ()=>{
            const invalidData = {
                ...validRegisterData,
                birthday: 'invalid-date'
            };
            const mockReq = _setup.testUtils.createMockRequest({
                body: invalidData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid birthday format.'
            });
        });
        it('should return 400 if password does not meet requirements', async ()=>{
            const invalidData = {
                ...validRegisterData,
                password: 'weak',
                confirmPassword: 'weak'
            };
            const mockReq = _setup.testUtils.createMockRequest({
                body: invalidData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Password must be at least 8 characters long, include an uppercase letter, lowercase letter, a number, and a special character.'
            });
        });
        it('should return 400 if family name is wrong for existing family', async ()=>{
            const mockFamilyData = _setup.testUtils.createMockFamily({
                email: validRegisterData.email,
                familyName: 'Different Family Name'
            });
            mockFamily.findOne.mockResolvedValue(mockFamilyData);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validRegisterData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Wrong family name'
            });
        });
        it('should return 400 if member with same name exists in family', async ()=>{
            const mockFamilyData = _setup.testUtils.createMockFamily({
                email: validRegisterData.email,
                familyName: validRegisterData.familyName
            });
            const existingUser = _setup.testUtils.createMockUser({
                name: validRegisterData.name,
                familyId: mockFamilyData._id
            });
            mockFamily.findOne.mockResolvedValue(mockFamilyData);
            mockUser.findOne.mockResolvedValue(existingUser);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validRegisterData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'A member with this name already exists in the family.'
            });
        });
        it('should handle database errors gracefully', async ()=>{
            mockFamily.findOne.mockRejectedValue(new Error('Database connection failed'));
            const mockReq = _setup.testUtils.createMockRequest({
                body: validRegisterData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Something went wrong while registering.'
            });
        });
    });
    // 3. test forgetPassword API
    describe('forgetPassword', ()=>{
        const validForgetPasswordData = {
            name: 'Test User',
            email: 'test@example.com'
        };
        it('should send temporary password successfully', async ()=>{
            const mockUserData = _setup.testUtils.createMockUser(validForgetPasswordData);
            mockUser.findOne.mockResolvedValue(mockUserData);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validForgetPasswordData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.forgetPassword)(mockReq, mockRes);
            expect(mockUser.findOne).toHaveBeenCalledWith({
                email: validForgetPasswordData.email,
                name: validForgetPasswordData.name
            });
            expect(mockGenerateSecurePassword.generateSecurePassword).toHaveBeenCalled();
            expect(mockBcrypt.hash).toHaveBeenCalledWith('TempPass123!', 12);
            expect(mockUserData.isTempPassword).toBe(true);
            expect(mockUserData.passwordChangedAt).toBeDefined();
            expect(mockEmailService.sendMail).toHaveBeenCalledWith(expect.stringContaining('Guardian Grove'), validForgetPasswordData.email, 'Your Temporary Password', expect.stringContaining('TempPass123!'));
            expect(mockRes.status).toHaveBeenCalledWith(200);
            expect(mockRes.send).toHaveBeenCalledWith({
                message: 'Temporary password sent to your email.'
            });
        });
        it('should return 404 if user not found', async ()=>{
            mockUser.findOne.mockResolvedValue(null);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validForgetPasswordData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.forgetPassword)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(404);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid credentials. User not found.'
            });
        });
        it('should handle email service errors gracefully', async ()=>{
            const mockUserData = _setup.testUtils.createMockUser(validForgetPasswordData);
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockEmailService.sendMail.mockRejectedValue(new Error('Email service failed'));
            const mockReq = _setup.testUtils.createMockRequest({
                body: validForgetPasswordData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.forgetPassword)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Error sending temporary password.'
            });
        });
        it('should handle database save errors gracefully', async ()=>{
            const mockUserData = _setup.testUtils.createMockUser(validForgetPasswordData);
            mockUserData.save = jest.fn().mockRejectedValue(new Error('Database save failed'));
            mockUser.findOne.mockResolvedValue(mockUserData);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validForgetPasswordData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.forgetPassword)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Error sending temporary password.'
            });
        });
        it('should handle password hashing errors gracefully', async ()=>{
            const mockUserData = _setup.testUtils.createMockUser(validForgetPasswordData);
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.hash.mockRejectedValue(new Error('Hashing failed'));
            const mockReq = _setup.testUtils.createMockRequest({
                body: validForgetPasswordData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.forgetPassword)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Error sending temporary password.'
            });
        });
        it('should generate proper email HTML content', async ()=>{
            const mockUserData = _setup.testUtils.createMockUser({
                ...validForgetPasswordData,
                name: 'John Doe'
            });
            mockUser.findOne.mockResolvedValue(mockUserData);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validForgetPasswordData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.forgetPassword)(mockReq, mockRes);
            expect(mockEmailService.sendMail).toHaveBeenCalledWith(expect.any(String), validForgetPasswordData.email, 'Your Temporary Password', expect.stringMatching(/Hello John Doe/));
            expect(mockEmailService.sendMail).toHaveBeenCalledWith(expect.any(String), validForgetPasswordData.email, 'Your Temporary Password', expect.stringMatching(/TempPass123!/));
            expect(mockEmailService.sendMail).toHaveBeenCalledWith(expect.any(String), validForgetPasswordData.email, 'Your Temporary Password', expect.stringMatching(/Guardian Grove Team/));
        });
        it('should set correct user properties after password reset', async ()=>{
            const mockUserData = _setup.testUtils.createMockUser({
                ...validForgetPasswordData,
                isTempPassword: false,
                passwordChangedAt: new Date('2024-01-01')
            });
            mockUser.findOne.mockResolvedValue(mockUserData);
            const mockReq = _setup.testUtils.createMockRequest({
                body: validForgetPasswordData
            });
            const mockRes = _setup.testUtils.createMockResponse();
            await (0, _authcontroller.forgetPassword)(mockReq, mockRes);
            expect(mockUserData.password).toBe('hashedPassword');
            expect(mockUserData.isTempPassword).toBe(true);
            expect(mockUserData.passwordChangedAt).toBeInstanceOf(Date);
            expect(mockUserData.save).toHaveBeenCalled();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,