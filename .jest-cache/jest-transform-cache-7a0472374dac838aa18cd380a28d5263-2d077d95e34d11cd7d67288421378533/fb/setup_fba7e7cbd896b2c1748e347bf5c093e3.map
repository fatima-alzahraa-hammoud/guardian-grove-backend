{"version":3,"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\tests\\setup.ts"],"sourcesContent":["// Global test setup for Guardian Grove project\r\nimport { config } from 'dotenv';\r\n\r\n// Load test environment variables from .env.test\r\nconfig({ path: '.env.test' });\r\n\r\n// Set test timeout (10 seconds for database operations)\r\njest.setTimeout(10000);\r\n\r\n// Global cleanup after each test\r\nafterEach(() => {\r\n    jest.clearAllMocks();\r\n});\r\n\r\n// Set required environment variables for your app\r\nprocess.env.NODE_ENV = 'test';\r\n\r\n// Ensure these are set even if .env.test is missing some values\r\nif (!process.env.JWT_SECRET) {\r\n    process.env.JWT_SECRET = 'test-jwt-secret-fallback';\r\n}\r\nif (!process.env.EMAIL_USERNAME) {\r\n    process.env.EMAIL_USERNAME = 'test@guardiangrove.com';\r\n}\r\nif (!process.env.EMAIL_PASSWORD) {\r\n    process.env.EMAIL_PASSWORD = 'test-password';\r\n}\r\nif (!process.env.MONGO_URI) {\r\n    process.env.MONGO_URI = 'mongodb://localhost:27017/guardian_grove_test';\r\n}\r\nif (!process.env.PORT) {\r\n    process.env.PORT = '3001';\r\n}\r\n\r\n// Export test utilities\r\nexport const testUtils = {\r\n    // Create mock Express request object\r\n    createMockRequest: (overrides = {}) => ({\r\n        body: {},\r\n        params: {},\r\n        query: {},\r\n        headers: {},\r\n        user: null,\r\n        ...overrides,\r\n    }),\r\n    \r\n    // Create mock Express response object with all methods your controllers use\r\n    createMockResponse: () => {\r\n        const res: any = {};\r\n        res.status = jest.fn().mockReturnValue(res);\r\n        res.json = jest.fn().mockReturnValue(res);\r\n        res.send = jest.fn().mockReturnValue(res);\r\n        res.cookie = jest.fn().mockReturnValue(res);\r\n        res.clearCookie = jest.fn().mockReturnValue(res);\r\n        res.redirect = jest.fn().mockReturnValue(res);\r\n        return res;\r\n    },\r\n\r\n    // Create mock user based on your actual User model structure\r\n    createMockUser: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439011',\r\n        name: 'Test User',\r\n        email: 'test@example.com',\r\n        isTempPassword: false,\r\n        passwordChangedAt: new Date('2024-01-01'),\r\n        password: 'hashedPassword123',\r\n        birthday: new Date('1990-01-01'),\r\n        dailyMessage: 'You are shiningðŸ’«!',\r\n        gender: 'male',\r\n        role: 'parent',\r\n        avatar: '/assets/images/avatars/parent/avatar1.png',\r\n        interests: ['reading', 'sports'],\r\n        memberSince: new Date('2024-01-01'),\r\n        currentLocation: 'not specified',\r\n        stars: 100,\r\n        coins: 50,\r\n        nbOfTasksCompleted: 5,\r\n        rankInFamily: 1,\r\n        familyId: '507f1f77bcf86cd799439012',\r\n        // Arrays based on your schema\r\n        adventures: [],\r\n        achievements: [],\r\n        purchasedItems: [],\r\n        notifications: [],\r\n        notes: [],\r\n        goals: [],\r\n        books: [],\r\n        drawings: [],\r\n        colorings: [],\r\n        personalStories: [],\r\n        // Mock Mongoose methods\r\n        save: jest.fn().mockResolvedValue(true),\r\n        toJSON: jest.fn(),\r\n        equals: jest.fn((id: any) => id === '507f1f77bcf86cd799439011'),\r\n        ...overrides\r\n    }),\r\n\r\n    // Create mock family based on your Family model\r\n    createMockFamily: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439012',\r\n        email: 'family@example.com',\r\n        members: [],\r\n        totalStars: 500,\r\n        familyName: 'Test Family',\r\n        // Mock Mongoose methods\r\n        save: jest.fn().mockResolvedValue(true),\r\n        ...overrides\r\n    }),\r\n\r\n    // Create mock adventure based on your Adventure model\r\n    createMockAdventure: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439015',\r\n        title: 'Test Adventure',\r\n        description: 'A test adventure',\r\n        challenges: [\r\n        {\r\n            _id: '507f1f77bcf86cd799439016',\r\n            title: 'Test Challenge',\r\n            description: 'A test challenge',\r\n            starsReward: 10,\r\n            coinsReward: 5,\r\n            equals: jest.fn((id: any) => id === '507f1f77bcf86cd799439016')\r\n        }\r\n        ],\r\n        starsReward: 100,\r\n        coinsReward: 50,\r\n        difficulty: 'easy',\r\n        category: 'learning',\r\n        ...overrides\r\n    }),\r\n\r\n    // Valid MongoDB ObjectId for testing (24 character hex string)\r\n    validObjectId: '507f1f77bcf86cd799439011',\r\n    \r\n    // Invalid ObjectId for testing error cases\r\n    invalidObjectId: 'invalid-id-format',\r\n\r\n    // Helper functions for nested schema objects\r\n    createMockAdventureProgress: (overrides = {}) => ({\r\n        adventureId: '507f1f77bcf86cd799439015',\r\n        challenges: [],\r\n        isAdventureCompleted: false,\r\n        status: 'in-progress',\r\n        progress: 0,\r\n        starsReward: 10,\r\n        coinsReward: 5,\r\n        ...overrides\r\n    }),\r\n\r\n    createMockChallengeProgress: (overrides = {}) => ({\r\n        challengeId: '507f1f77bcf86cd799439016',\r\n        isCompleted: false,\r\n        completedAt: undefined,\r\n        ...overrides\r\n    }),\r\n\r\n    createMockPurchasedItem: (overrides = {}) => ({\r\n        itemId: '507f1f77bcf86cd799439017',\r\n        purchasedAt: new Date(),\r\n        ...overrides\r\n    }),\r\n\r\n    createMockNote: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439018',\r\n        title: 'Test Note',\r\n        content: 'This is a test note content',\r\n        type: 'personal',\r\n        isPinned: false,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        ...overrides\r\n    }),\r\n\r\n    createMockNotification: (overrides = {}) => ({\r\n        _id: '507f1f77bcf86cd799439019',\r\n        title: 'Test Notification',\r\n        message: 'This is a test notification',\r\n        type: 'info',\r\n        isRead: false,\r\n        createdAt: new Date(),\r\n        ...overrides\r\n    })\r\n};"],"names":["testUtils","config","path","jest","setTimeout","afterEach","clearAllMocks","process","env","NODE_ENV","JWT_SECRET","EMAIL_USERNAME","EMAIL_PASSWORD","MONGO_URI","PORT","createMockRequest","overrides","body","params","query","headers","user","createMockResponse","res","status","fn","mockReturnValue","json","send","cookie","clearCookie","redirect","createMockUser","_id","name","email","isTempPassword","passwordChangedAt","Date","password","birthday","dailyMessage","gender","role","avatar","interests","memberSince","currentLocation","stars","coins","nbOfTasksCompleted","rankInFamily","familyId","adventures","achievements","purchasedItems","notifications","notes","goals","books","drawings","colorings","personalStories","save","mockResolvedValue","toJSON","equals","id","createMockFamily","members","totalStars","familyName","createMockAdventure","title","description","challenges","starsReward","coinsReward","difficulty","category","validObjectId","invalidObjectId","createMockAdventureProgress","adventureId","isAdventureCompleted","progress","createMockChallengeProgress","challengeId","isCompleted","completedAt","undefined","createMockPurchasedItem","itemId","purchasedAt","createMockNote","content","type","isPinned","createdAt","updatedAt","createMockNotification","message","isRead"],"mappings":"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"}