{"file":"C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\src\\controllers\\auth.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\src\\controllers\\auth.controller.ts"],"sourcesContent":["import { Response, Request } from \"express\";\r\nimport bcrypt from \"bcrypt\";\r\nimport { throwError } from \"../utils/error\";\r\nimport { User } from \"../models/user.model\";\r\nimport dotenv from \"dotenv\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { Family } from \"../models/family.model\";\r\nimport { generateSecurePassword } from \"../utils/generateSecurePassword\";\r\nimport { sendMail } from \"../services/email.service\";\r\n\r\ndotenv.config();\r\n\r\nconst JWT_SECRET_KEY = process.env.JWT_SECRET;\r\n\r\n\r\n// login\r\nexport const login = async ( req: Request, res: Response) : Promise<void> => {\r\n\r\n    try{\r\n        const {name, email, password} = req.body;\r\n\r\n        if (!name || !email || !password) {\r\n            return throwError({ message: \"Name, email, and password are required.\", res, status: 400 });\r\n        }\r\n    \r\n        const user = await User.findOne({\r\n            name: name,\r\n            email: email, \r\n        });\r\n\r\n        if (!user) {\r\n            return throwError({ message: \"Invalid credentials. User not found.\", res, status: 404 });\r\n        }\r\n\r\n        // Verify password\r\n        const isMatch = await bcrypt.compare(password, user.password);\r\n        if (!isMatch) {\r\n            return throwError({ message: \"Invalid password.\", res, status: 401 });\r\n        }\r\n\r\n        if (!JWT_SECRET_KEY) {\r\n            return throwError({ message: \"JWT_SECRET_KEY is not defined\", res, status: 500 });\r\n        }\r\n\r\n        const token = await jwt.sign({ userId: user.id, role: user.role }, JWT_SECRET_KEY);\r\n\r\n        res.status(200).json({\r\n            user: user,\r\n            token,\r\n            requiresPasswordChange: user.isTempPassword || false,\r\n            message: user.isTempPassword \r\n                ? 'Please set a new password' \r\n                : 'Login successful'\r\n        });\r\n    }catch(error){\r\n        return throwError({ message: \"Something went wrong while logging in.\", res, status: 500});\r\n    }\r\n}\r\n\r\n// register\r\nexport const register = async (req: Request, res: Response) : Promise<void> => {\r\n    try{\r\n        const data = req.body;\r\n        const { name, email, password, confirmPassword, birthday, gender, role, avatar, interests, familyName, familyAvatar } = data;\r\n        \r\n        // verify all fields are filled\r\n        if (!name || !email || !password || !confirmPassword || !birthday || !gender || !role || !avatar || !interests || !familyName || !familyAvatar) {\r\n            return throwError({ message: \"All required fields must be filled.\", res, status: 400});\r\n        }\r\n\r\n        if (password !== confirmPassword){\r\n            return throwError({ message: \"Passwords do not match\", res, status: 400 });\r\n        }\r\n\r\n        // Email Validation\r\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        if (!emailRegex.test(email)) {\r\n            return throwError({ message: \"Invalid email format.\", res, status: 400});\r\n        }\r\n\r\n        // Role validation\r\n        const validRoles = ['parent', 'admin'];\r\n        if (!validRoles.includes(role)) {\r\n            if (role === \"child\"){\r\n                return throwError({ message: \"Children must be added by a parent.\", res, status: 400});\r\n            }\r\n            return throwError({ message: \"Invalid role.\", res, status: 400});\r\n        }\r\n        \r\n        if (!Array.isArray(interests)) {\r\n            return throwError({ message: \"Interests must be an array.\", res, status: 400 });\r\n        }\r\n\r\n        // Gender Validation\r\n        const validGenders = ['male', 'female'];\r\n        if (!validGenders.includes(gender)) {\r\n            return throwError({ message: \"Gender must be either 'male' or 'female'.\", res, status: 400});\r\n        }\r\n\r\n        // Birthday Validation\r\n        if (isNaN(new Date(birthday).getTime())) {\r\n            return throwError({ message: \"Invalid birthday format.\", res, status: 400 });\r\n        }\r\n\r\n        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n        if (!passwordRegex.test(password)) {\r\n            return throwError({\r\n                message: \"Password must be at least 8 characters long, include an uppercase letter, lowercase letter, a number, and a special character.\",\r\n                res,\r\n                status: 400\r\n            });\r\n        }\r\n\r\n        const hashedPassword = await bcrypt.hash(password, 12);\r\n\r\n\r\n         // Family Assignment\r\n         let family = await Family.findOne({ email });\r\n\r\n         if (!family) {\r\n            family = new Family({\r\n                familyName: familyName,\r\n                email,\r\n                familyAvatar: familyAvatar,\r\n                members: [],\r\n                createdAt: new Date()\r\n            });\r\n            await family.save();\r\n        }\r\n        else{\r\n            if (family.familyName !== familyName){\r\n                return throwError({ message: \"Wrong family name\", res, status: 400 })\r\n            }\r\n        }\r\n\r\n        // Check if a family member with the same name already exists\r\n        const existingFamilyMember = await User.findOne({ name, familyId: family._id });\r\n        if (existingFamilyMember) {\r\n            return throwError({ message: \"A member with this name already exists in the family.\", res, status: 400 });\r\n        }\r\n\r\n        // Create the user and link to family\r\n        const newUser = await User.create({...data, password: hashedPassword, familyId: family._id}); \r\n\r\n        // Add user to the family members list if not already present\r\n        if (!family.members.includes(newUser.id)) {\r\n            family.members.push({_id: newUser.id, role, name, gender, avatar});\r\n            await family.save();\r\n        }\r\n\r\n\r\n        if (!JWT_SECRET_KEY) {\r\n            return throwError({ message: \"JWT_SECRET_KEY is not defined\", res, status: 500 });\r\n        }\r\n\r\n        const token = await jwt.sign({ userId: newUser.id, role: newUser.role  }, JWT_SECRET_KEY);\r\n\r\n        res.status(200).send({user: newUser, token: token, family: family});\r\n\r\n    }catch(error){\r\n        return throwError({ message: \"Something went wrong while registering.\", res, status: 500});\r\n    }\r\n}  \r\n\r\n// forget password API\r\nexport const forgetPassword = async (req: Request, res: Response) : Promise<void> => {\r\n    try {\r\n        const { name, email } = req.body;\r\n        const user = await User.findOne({ email, name });\r\n\r\n        if (!user) {\r\n            return throwError({ message: \"Invalid credentials. User not found.\", res, status: 404 });\r\n        }\r\n\r\n        const tempPassword = generateSecurePassword();\r\n        const hashedPassword = await bcrypt.hash(tempPassword, 12);\r\n\r\n        user.password = hashedPassword;\r\n        user.isTempPassword = true;\r\n        user.passwordChangedAt = new Date();\r\n        await user.save();\r\n\r\n\r\n        const from: string = `\"Guardian Grove\" <${process.env.EMAIL_USERNAME}>`;\r\n        const to: string = email;\r\n        const subject: string = \"Your Temporary Password\";\r\n\r\n        const html: string = `\r\n            <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n                <h2 style=\"color: #2c3e50;\">Hello ${user.name},</h2>\r\n                <p>Your temporary password is: <strong>${tempPassword}</strong></p>\r\n                <p>This password will expire in 1 hour.</p>\r\n                <p>Please use this to login and change your password immediately.</p>\r\n                <br/>\r\n                <p>Thank you,</p>\r\n                <p><strong>Guardian Grove Team</strong></p>\r\n            </div>\r\n        `\r\n\r\n        // Send email with the temporary password\r\n        await sendMail(from, to, subject, html);\r\n\r\n        res.status(200).send({ message: \"Temporary password sent to your email.\" });\r\n\r\n    } catch (error) {\r\n        return throwError({ message: \"Error sending temporary password.\", res, status: 500});\r\n    }\r\n}"],"version":3}