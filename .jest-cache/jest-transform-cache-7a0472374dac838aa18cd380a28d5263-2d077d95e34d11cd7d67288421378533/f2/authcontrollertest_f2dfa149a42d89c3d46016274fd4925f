d9da0e565119aa2844c416a75d5f8658
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock all dependencies
jest.mock('../../src/models/user.model');
jest.mock('../../src/models/family.model');
jest.mock('../../src/services/email.service');
jest.mock('../../src/utils/generateSecurePassword');
jest.mock('bcrypt');
jest.mock('jsonwebtoken');
const setup_1 = require("../setup");
const auth_controller_1 = require("../../src/controllers/auth.controller");
const user_model_1 = require("../../src/models/user.model");
const family_model_1 = require("../../src/models/family.model");
const generateSecurePassword = __importStar(require("../../src/utils/generateSecurePassword"));
const emailService = __importStar(require("../../src/services/email.service"));
const bcrypt = __importStar(require("bcrypt"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const mockUser = user_model_1.User;
const mockFamily = family_model_1.Family;
const mockGenerateSecurePassword = generateSecurePassword;
const mockEmailService = emailService;
const mockBcrypt = bcrypt;
const mockJwt = jsonwebtoken_1.default;
describe('Auth Controller Tests', () => {
    beforeEach(() => {
        jest.clearAllMocks();
        // Setup User model methods
        mockUser.findOne = jest.fn();
        mockUser.create = jest.fn();
        // Setup Family model methods
        mockFamily.findOne = jest.fn();
        // Setup utility mocks
        mockGenerateSecurePassword.generateSecurePassword.mockReturnValue('TempPass123!');
        jest.spyOn(mockEmailService, 'sendMail').mockResolvedValue(undefined);
        jest.spyOn(bcrypt, 'hash').mockResolvedValue('hashedPassword');
        jest.spyOn(bcrypt, 'compare').mockResolvedValue(true);
        jest.spyOn(jsonwebtoken_1.default, 'sign').mockResolvedValue('mock-jwt-token');
        // Set JWT_SECRET environment variable
        process.env.JWT_SECRET = 'test_jwt_secret_key_for_guardian_grove_123';
    });
    afterEach(() => {
        // Clean up environment variables if needed
        if (!process.env.JWT_SECRET) {
            process.env.JWT_SECRET = 'test_jwt_secret_key_for_guardian_grove_123';
        }
    });
    // 1. test login API
    describe('login', () => {
        const validLoginData = {
            name: 'Test User',
            email: 'test@example.com',
            password: 'TestPass123!'
        };
        it('should login successfully with valid credentials', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = Object.assign(Object.assign({}, setup_1.testUtils.createMockUser(Object.assign(Object.assign({}, validLoginData), { isTempPassword: false }))), { id: '507f1f77bcf86cd799439011' });
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.compare.mockResolvedValue(true);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validLoginData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.login)(mockReq, mockRes);
            expect(mockUser.findOne).toHaveBeenCalledWith({
                name: validLoginData.name,
                email: validLoginData.email
            });
            expect(mockBcrypt.compare).toHaveBeenCalledWith(validLoginData.password, mockUserData.password);
            expect(mockJwt.sign).toHaveBeenCalledWith({ userId: mockUserData.id, role: mockUserData.role }, 'test_jwt_secret_key_for_guardian_grove_123');
            expect(mockRes.status).toHaveBeenCalledWith(200);
            expect(mockRes.json).toHaveBeenCalledWith({
                user: mockUserData,
                token: 'mock-jwt-token',
                requiresPasswordChange: false,
                message: 'Login successful'
            });
        }));
        it('should login with temporary password and require password change', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = Object.assign(Object.assign({}, setup_1.testUtils.createMockUser(Object.assign(Object.assign({}, validLoginData), { isTempPassword: true }))), { id: '507f1f77bcf86cd799439011' // Add id property for JWT
             });
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.compare.mockResolvedValue(true);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validLoginData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(200);
            expect(mockRes.json).toHaveBeenCalledWith({
                user: mockUserData,
                token: 'mock-jwt-token',
                requiresPasswordChange: true,
                message: 'Please set a new password'
            });
        }));
        it('should return 400 if required fields are missing', () => __awaiter(void 0, void 0, void 0, function* () {
            const incompleteData = { name: 'Test User', email: 'test@example.com' }; // Missing password
            const mockReq = setup_1.testUtils.createMockRequest({ body: incompleteData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Name, email, and password are required.'
            });
        }));
        it('should return 404 if user not found', () => __awaiter(void 0, void 0, void 0, function* () {
            mockUser.findOne.mockResolvedValue(null);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validLoginData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(404);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid credentials. User not found.'
            });
        }));
        it('should return 401 if password is incorrect', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = Object.assign(Object.assign({}, setup_1.testUtils.createMockUser(validLoginData)), { id: '507f1f77bcf86cd799439011' });
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.compare.mockResolvedValue(false);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validLoginData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(401);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid password.'
            });
        }));
        it('should handle JWT signing errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = Object.assign(Object.assign({}, setup_1.testUtils.createMockUser(validLoginData)), { id: '507f1f77bcf86cd799439011' });
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.compare.mockResolvedValue(true);
            // Mock JWT sign to throw an error
            mockJwt.sign.mockRejectedValue(new Error('JWT signing failed'));
            const mockReq = setup_1.testUtils.createMockRequest({ body: validLoginData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Something went wrong while logging in.'
            });
        }));
        it('should handle database errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            mockUser.findOne.mockRejectedValue(new Error('Database connection failed'));
            const mockReq = setup_1.testUtils.createMockRequest({ body: validLoginData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.login)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Something went wrong while logging in.'
            });
        }));
    });
    // 2. test register API
    describe('register', () => {
        const validRegisterData = {
            name: 'Test Parent',
            email: 'parent@example.com',
            password: 'TestPass123!',
            confirmPassword: 'TestPass123!',
            birthday: '1985-01-01',
            gender: 'male',
            role: 'parent',
            avatar: '/avatar.png',
            interests: ['reading', 'sports'],
            familyName: 'Test Family',
            familyAvatar: '/family-avatar.png'
        };
        it('should register successfully with valid data', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockFamilyData = setup_1.testUtils.createMockFamily({
                email: validRegisterData.email,
                familyName: validRegisterData.familyName,
                members: []
            });
            const mockCreatedUser = Object.assign(Object.assign({}, setup_1.testUtils.createMockUser(Object.assign(Object.assign({}, validRegisterData), { familyId: mockFamilyData._id }))), { id: '507f1f77bcf86cd799439011' // Add id property for JWT
             });
            mockFamily.findOne.mockResolvedValue(null); // New family
            mockFamily.prototype.save = jest.fn().mockResolvedValue(mockFamilyData);
            mockUser.findOne.mockResolvedValue(null); // No existing user with same name
            mockUser.create.mockResolvedValue(mockCreatedUser);
            // Mock the Family constructor
            mockFamily.mockImplementation(() => (Object.assign(Object.assign({}, mockFamilyData), { save: jest.fn().mockResolvedValue(mockFamilyData) })));
            const mockReq = setup_1.testUtils.createMockRequest({ body: validRegisterData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockBcrypt.hash).toHaveBeenCalledWith(validRegisterData.password, 12);
            expect(mockUser.create).toHaveBeenCalled();
            expect(mockJwt.sign).toHaveBeenCalledWith({ userId: mockCreatedUser.id, role: mockCreatedUser.role }, 'test_jwt_secret_key_for_guardian_grove_123');
            expect(mockRes.status).toHaveBeenCalledWith(200);
        }));
        it('should register with existing family', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockFamilyData = setup_1.testUtils.createMockFamily({
                email: validRegisterData.email,
                familyName: validRegisterData.familyName,
                members: []
            });
            mockFamilyData.save = jest.fn().mockResolvedValue(mockFamilyData);
            const mockCreatedUser = Object.assign(Object.assign({}, setup_1.testUtils.createMockUser(Object.assign(Object.assign({}, validRegisterData), { familyId: mockFamilyData._id }))), { id: '507f1f77bcf86cd799439011' // Add id property for JWT
             });
            mockFamily.findOne.mockResolvedValue(mockFamilyData);
            mockUser.findOne.mockResolvedValue(null);
            mockUser.create.mockResolvedValue(mockCreatedUser);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validRegisterData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(200);
        }));
        it('should return 400 if required fields are missing', () => __awaiter(void 0, void 0, void 0, function* () {
            const incompleteData = Object.assign({}, validRegisterData);
            delete incompleteData.name;
            const mockReq = setup_1.testUtils.createMockRequest({ body: incompleteData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'All required fields must be filled.'
            });
        }));
        it('should return 400 if passwords do not match', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = Object.assign(Object.assign({}, validRegisterData), { confirmPassword: 'DifferentPass123!' });
            const mockReq = setup_1.testUtils.createMockRequest({ body: invalidData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Passwords do not match'
            });
        }));
        it('should return 400 if email format is invalid', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = Object.assign(Object.assign({}, validRegisterData), { email: 'invalid-email' });
            const mockReq = setup_1.testUtils.createMockRequest({ body: invalidData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid email format.'
            });
        }));
        it('should return 400 if role is child', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = Object.assign(Object.assign({}, validRegisterData), { role: 'child' });
            const mockReq = setup_1.testUtils.createMockRequest({ body: invalidData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Children must be added by a parent.'
            });
        }));
        it('should return 400 if role is invalid', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = Object.assign(Object.assign({}, validRegisterData), { role: 'invalid-role' });
            const mockReq = setup_1.testUtils.createMockRequest({ body: invalidData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid role.'
            });
        }));
        it('should return 400 if interests is not an array', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = Object.assign(Object.assign({}, validRegisterData), { interests: 'not-an-array' });
            const mockReq = setup_1.testUtils.createMockRequest({ body: invalidData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Interests must be an array.'
            });
        }));
        it('should return 400 if gender is invalid', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = Object.assign(Object.assign({}, validRegisterData), { gender: 'invalid-gender' });
            const mockReq = setup_1.testUtils.createMockRequest({ body: invalidData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: "Gender must be either 'male' or 'female'."
            });
        }));
        it('should return 400 if birthday format is invalid', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = Object.assign(Object.assign({}, validRegisterData), { birthday: 'invalid-date' });
            const mockReq = setup_1.testUtils.createMockRequest({ body: invalidData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid birthday format.'
            });
        }));
        it('should return 400 if password does not meet requirements', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidData = Object.assign(Object.assign({}, validRegisterData), { password: 'weak', confirmPassword: 'weak' });
            const mockReq = setup_1.testUtils.createMockRequest({ body: invalidData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Password must be at least 8 characters long, include an uppercase letter, lowercase letter, a number, and a special character.'
            });
        }));
        it('should return 400 if family name is wrong for existing family', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockFamilyData = setup_1.testUtils.createMockFamily({
                email: validRegisterData.email,
                familyName: 'Different Family Name'
            });
            mockFamily.findOne.mockResolvedValue(mockFamilyData);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validRegisterData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Wrong family name'
            });
        }));
        it('should return 400 if member with same name exists in family', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockFamilyData = setup_1.testUtils.createMockFamily({
                email: validRegisterData.email,
                familyName: validRegisterData.familyName
            });
            const existingUser = setup_1.testUtils.createMockUser({
                name: validRegisterData.name,
                familyId: mockFamilyData._id
            });
            mockFamily.findOne.mockResolvedValue(mockFamilyData);
            mockUser.findOne.mockResolvedValue(existingUser);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validRegisterData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(400);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'A member with this name already exists in the family.'
            });
        }));
        it('should handle database errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            mockFamily.findOne.mockRejectedValue(new Error('Database connection failed'));
            const mockReq = setup_1.testUtils.createMockRequest({ body: validRegisterData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.register)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Something went wrong while registering.'
            });
        }));
    });
    // 3. test forgetPassword API
    describe('forgetPassword', () => {
        const validForgetPasswordData = {
            name: 'Test User',
            email: 'test@example.com'
        };
        it('should send temporary password successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = setup_1.testUtils.createMockUser(validForgetPasswordData);
            mockUser.findOne.mockResolvedValue(mockUserData);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validForgetPasswordData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.forgetPassword)(mockReq, mockRes);
            expect(mockUser.findOne).toHaveBeenCalledWith({
                email: validForgetPasswordData.email,
                name: validForgetPasswordData.name
            });
            expect(mockGenerateSecurePassword.generateSecurePassword).toHaveBeenCalled();
            expect(mockBcrypt.hash).toHaveBeenCalledWith('TempPass123!', 12);
            expect(mockUserData.isTempPassword).toBe(true);
            expect(mockUserData.passwordChangedAt).toBeDefined();
            expect(mockEmailService.sendMail).toHaveBeenCalledWith(expect.stringContaining('Guardian Grove'), validForgetPasswordData.email, 'Your Temporary Password', expect.stringContaining('TempPass123!'));
            expect(mockRes.status).toHaveBeenCalledWith(200);
            expect(mockRes.send).toHaveBeenCalledWith({
                message: 'Temporary password sent to your email.'
            });
        }));
        it('should return 404 if user not found', () => __awaiter(void 0, void 0, void 0, function* () {
            mockUser.findOne.mockResolvedValue(null);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validForgetPasswordData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.forgetPassword)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(404);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Invalid credentials. User not found.'
            });
        }));
        it('should handle email service errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = setup_1.testUtils.createMockUser(validForgetPasswordData);
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockEmailService.sendMail.mockRejectedValue(new Error('Email service failed'));
            const mockReq = setup_1.testUtils.createMockRequest({ body: validForgetPasswordData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.forgetPassword)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Error sending temporary password.'
            });
        }));
        it('should handle database save errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = setup_1.testUtils.createMockUser(validForgetPasswordData);
            mockUserData.save = jest.fn().mockRejectedValue(new Error('Database save failed'));
            mockUser.findOne.mockResolvedValue(mockUserData);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validForgetPasswordData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.forgetPassword)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Error sending temporary password.'
            });
        }));
        it('should handle password hashing errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = setup_1.testUtils.createMockUser(validForgetPasswordData);
            mockUser.findOne.mockResolvedValue(mockUserData);
            mockBcrypt.hash.mockRejectedValue(new Error('Hashing failed'));
            const mockReq = setup_1.testUtils.createMockRequest({ body: validForgetPasswordData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.forgetPassword)(mockReq, mockRes);
            expect(mockRes.status).toHaveBeenCalledWith(500);
            expect(mockRes.json).toHaveBeenCalledWith({
                error: 'Error sending temporary password.'
            });
        }));
        it('should generate proper email HTML content', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = setup_1.testUtils.createMockUser(Object.assign(Object.assign({}, validForgetPasswordData), { name: 'John Doe' }));
            mockUser.findOne.mockResolvedValue(mockUserData);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validForgetPasswordData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.forgetPassword)(mockReq, mockRes);
            expect(mockEmailService.sendMail).toHaveBeenCalledWith(expect.any(String), validForgetPasswordData.email, 'Your Temporary Password', expect.stringMatching(/Hello John Doe/));
            expect(mockEmailService.sendMail).toHaveBeenCalledWith(expect.any(String), validForgetPasswordData.email, 'Your Temporary Password', expect.stringMatching(/TempPass123!/));
            expect(mockEmailService.sendMail).toHaveBeenCalledWith(expect.any(String), validForgetPasswordData.email, 'Your Temporary Password', expect.stringMatching(/Guardian Grove Team/));
        }));
        it('should set correct user properties after password reset', () => __awaiter(void 0, void 0, void 0, function* () {
            const mockUserData = setup_1.testUtils.createMockUser(Object.assign(Object.assign({}, validForgetPasswordData), { isTempPassword: false, passwordChangedAt: new Date('2024-01-01') }));
            mockUser.findOne.mockResolvedValue(mockUserData);
            const mockReq = setup_1.testUtils.createMockRequest({ body: validForgetPasswordData });
            const mockRes = setup_1.testUtils.createMockResponse();
            yield (0, auth_controller_1.forgetPassword)(mockReq, mockRes);
            expect(mockUserData.password).toBe('hashedPassword');
            expect(mockUserData.isTempPassword).toBe(true);
            expect(mockUserData.passwordChangedAt).toBeInstanceOf(Date);
            expect(mockUserData.save).toHaveBeenCalled();
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,