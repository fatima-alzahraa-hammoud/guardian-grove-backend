812a73286a2e5a881a0278567236399c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get forgetPassword () {
        return forgetPassword;
    },
    get login () {
        return login;
    },
    get register () {
        return register;
    }
});
const _bcrypt = /*#__PURE__*/ _interop_require_default(require("bcrypt"));
const _error = require("../utils/error");
const _usermodel = require("../models/user.model");
const _dotenv = /*#__PURE__*/ _interop_require_default(require("dotenv"));
const _jsonwebtoken = /*#__PURE__*/ _interop_require_default(require("jsonwebtoken"));
const _familymodel = require("../models/family.model");
const _generateSecurePassword = require("../utils/generateSecurePassword");
const _emailservice = require("../services/email.service");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
_dotenv.default.config();
const JWT_SECRET_KEY = process.env.JWT_SECRET;
const login = async (req, res)=>{
    try {
        const { name, email, password } = req.body;
        if (!name || !email || !password) {
            return (0, _error.throwError)({
                message: "Name, email, and password are required.",
                res,
                status: 400
            });
        }
        const user = await _usermodel.User.findOne({
            name: name,
            email: email
        });
        if (!user) {
            return (0, _error.throwError)({
                message: "Invalid credentials. User not found.",
                res,
                status: 404
            });
        }
        // Verify password
        const isMatch = await _bcrypt.default.compare(password, user.password);
        if (!isMatch) {
            return (0, _error.throwError)({
                message: "Invalid password.",
                res,
                status: 401
            });
        }
        if (!JWT_SECRET_KEY) {
            return (0, _error.throwError)({
                message: "JWT_SECRET_KEY is not defined",
                res,
                status: 500
            });
        }
        const token = await _jsonwebtoken.default.sign({
            userId: user.id,
            role: user.role
        }, JWT_SECRET_KEY);
        res.status(200).json({
            user: user,
            token,
            requiresPasswordChange: user.isTempPassword || false,
            message: user.isTempPassword ? 'Please set a new password' : 'Login successful'
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Something went wrong while logging in.",
            res,
            status: 500
        });
    }
};
const register = async (req, res)=>{
    try {
        const data = req.body;
        const { name, email, password, confirmPassword, birthday, gender, role, avatar, interests, familyName, familyAvatar } = data;
        // verify all fields are filled
        if (!name || !email || !password || !confirmPassword || !birthday || !gender || !role || !avatar || !interests || !familyName || !familyAvatar) {
            return (0, _error.throwError)({
                message: "All required fields must be filled.",
                res,
                status: 400
            });
        }
        if (password !== confirmPassword) {
            return (0, _error.throwError)({
                message: "Passwords do not match",
                res,
                status: 400
            });
        }
        // Email Validation
        const emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
        if (!emailRegex.test(email)) {
            return (0, _error.throwError)({
                message: "Invalid email format.",
                res,
                status: 400
            });
        }
        // Role validation
        const validRoles = [
            'parent',
            'admin'
        ];
        if (!validRoles.includes(role)) {
            if (role === "child") {
                return (0, _error.throwError)({
                    message: "Children must be added by a parent.",
                    res,
                    status: 400
                });
            }
            return (0, _error.throwError)({
                message: "Invalid role.",
                res,
                status: 400
            });
        }
        if (!Array.isArray(interests)) {
            return (0, _error.throwError)({
                message: "Interests must be an array.",
                res,
                status: 400
            });
        }
        // Gender Validation
        const validGenders = [
            'male',
            'female'
        ];
        if (!validGenders.includes(gender)) {
            return (0, _error.throwError)({
                message: "Gender must be either 'male' or 'female'.",
                res,
                status: 400
            });
        }
        // Birthday Validation
        if (isNaN(new Date(birthday).getTime())) {
            return (0, _error.throwError)({
                message: "Invalid birthday format.",
                res,
                status: 400
            });
        }
        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
        if (!passwordRegex.test(password)) {
            return (0, _error.throwError)({
                message: "Password must be at least 8 characters long, include an uppercase letter, lowercase letter, a number, and a special character.",
                res,
                status: 400
            });
        }
        const hashedPassword = await _bcrypt.default.hash(password, 12);
        // Family Assignment
        let family = await _familymodel.Family.findOne({
            email
        });
        if (!family) {
            family = new _familymodel.Family({
                familyName: familyName,
                email,
                familyAvatar: familyAvatar,
                members: [],
                createdAt: new Date()
            });
            await family.save();
        } else {
            if (family.familyName !== familyName) {
                return (0, _error.throwError)({
                    message: "Wrong family name",
                    res,
                    status: 400
                });
            }
        }
        // Check if a family member with the same name already exists
        const existingFamilyMember = await _usermodel.User.findOne({
            name,
            familyId: family._id
        });
        if (existingFamilyMember) {
            return (0, _error.throwError)({
                message: "A member with this name already exists in the family.",
                res,
                status: 400
            });
        }
        // Create the user and link to family
        const newUser = await _usermodel.User.create({
            ...data,
            password: hashedPassword,
            familyId: family._id
        });
        // Add user to the family members list if not already present
        if (!family.members.includes(newUser.id)) {
            family.members.push({
                _id: newUser.id,
                role,
                name,
                gender,
                avatar
            });
            await family.save();
        }
        if (!JWT_SECRET_KEY) {
            return (0, _error.throwError)({
                message: "JWT_SECRET_KEY is not defined",
                res,
                status: 500
            });
        }
        const token = await _jsonwebtoken.default.sign({
            userId: newUser.id,
            role: newUser.role
        }, JWT_SECRET_KEY);
        res.status(200).send({
            user: newUser,
            token: token,
            family: family
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Something went wrong while registering.",
            res,
            status: 500
        });
    }
};
const forgetPassword = async (req, res)=>{
    try {
        const { name, email } = req.body;
        const user = await _usermodel.User.findOne({
            email,
            name
        });
        if (!user) {
            return (0, _error.throwError)({
                message: "Invalid credentials. User not found.",
                res,
                status: 404
            });
        }
        const tempPassword = (0, _generateSecurePassword.generateSecurePassword)();
        const hashedPassword = await _bcrypt.default.hash(tempPassword, 12);
        user.password = hashedPassword;
        user.isTempPassword = true;
        user.passwordChangedAt = new Date();
        await user.save();
        const from = `"Guardian Grove" <${process.env.EMAIL_USERNAME}>`;
        const to = email;
        const subject = "Your Temporary Password";
        const html = `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                <h2 style="color: #2c3e50;">Hello ${user.name},</h2>
                <p>Your temporary password is: <strong>${tempPassword}</strong></p>
                <p>This password will expire in 1 hour.</p>
                <p>Please use this to login and change your password immediately.</p>
                <br/>
                <p>Thank you,</p>
                <p><strong>Guardian Grove Team</strong></p>
            </div>
        `;
        // Send email with the temporary password
        await (0, _emailservice.sendMail)(from, to, subject, html);
        res.status(200).send({
            message: "Temporary password sent to your email."
        });
    } catch (error) {
        return (0, _error.throwError)({
            message: "Error sending temporary password.",
            res,
            status: 500
        });
    }
};

//# sourceMappingURL=data:application/json;base64,