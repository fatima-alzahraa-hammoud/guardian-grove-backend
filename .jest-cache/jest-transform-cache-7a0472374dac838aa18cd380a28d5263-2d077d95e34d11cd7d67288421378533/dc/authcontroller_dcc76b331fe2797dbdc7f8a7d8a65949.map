{"version":3,"sources":["C:\\Users\\USER\\Desktop\\guardian-grove\\guardian-grove-backend\\src\\controllers\\auth.controller.ts"],"sourcesContent":["import { Response, Request } from \"express\";\r\nimport bcrypt from \"bcrypt\";\r\nimport { throwError } from \"../utils/error\";\r\nimport { User } from \"../models/user.model\";\r\nimport dotenv from \"dotenv\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { Family } from \"../models/family.model\";\r\nimport { generateSecurePassword } from \"../utils/generateSecurePassword\";\r\nimport { sendMail } from \"../services/email.service\";\r\n\r\ndotenv.config();\r\n\r\nconst JWT_SECRET_KEY = process.env.JWT_SECRET;\r\n\r\n\r\n// login\r\nexport const login = async ( req: Request, res: Response) : Promise<void> => {\r\n\r\n    try{\r\n        const {name, email, password} = req.body;\r\n\r\n        if (!name || !email || !password) {\r\n            return throwError({ message: \"Name, email, and password are required.\", res, status: 400 });\r\n        }\r\n    \r\n        const user = await User.findOne({\r\n            name: name,\r\n            email: email, \r\n        });\r\n\r\n        if (!user) {\r\n            return throwError({ message: \"Invalid credentials. User not found.\", res, status: 404 });\r\n        }\r\n\r\n        // Verify password\r\n        const isMatch = await bcrypt.compare(password, user.password);\r\n        if (!isMatch) {\r\n            return throwError({ message: \"Invalid password.\", res, status: 401 });\r\n        }\r\n\r\n        if (!JWT_SECRET_KEY) {\r\n            return throwError({ message: \"JWT_SECRET_KEY is not defined\", res, status: 500 });\r\n        }\r\n\r\n        const token = await jwt.sign({ userId: user.id, role: user.role }, JWT_SECRET_KEY);\r\n\r\n        res.status(200).json({\r\n            user: user,\r\n            token,\r\n            requiresPasswordChange: user.isTempPassword || false,\r\n            message: user.isTempPassword \r\n                ? 'Please set a new password' \r\n                : 'Login successful'\r\n        });\r\n    }catch(error){\r\n        return throwError({ message: \"Something went wrong while logging in.\", res, status: 500});\r\n    }\r\n}\r\n\r\n// register\r\nexport const register = async (req: Request, res: Response) : Promise<void> => {\r\n    try{\r\n        const data = req.body;\r\n        const { name, email, password, confirmPassword, birthday, gender, role, avatar, interests, familyName, familyAvatar } = data;\r\n        \r\n        // verify all fields are filled\r\n        if (!name || !email || !password || !confirmPassword || !birthday || !gender || !role || !avatar || !interests || !familyName || !familyAvatar) {\r\n            return throwError({ message: \"All required fields must be filled.\", res, status: 400});\r\n        }\r\n\r\n        if (password !== confirmPassword){\r\n            return throwError({ message: \"Passwords do not match\", res, status: 400 });\r\n        }\r\n\r\n        // Email Validation\r\n        const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        if (!emailRegex.test(email)) {\r\n            return throwError({ message: \"Invalid email format.\", res, status: 400});\r\n        }\r\n\r\n        // Role validation\r\n        const validRoles = ['parent', 'admin'];\r\n        if (!validRoles.includes(role)) {\r\n            if (role === \"child\"){\r\n                return throwError({ message: \"Children must be added by a parent.\", res, status: 400});\r\n            }\r\n            return throwError({ message: \"Invalid role.\", res, status: 400});\r\n        }\r\n        \r\n        if (!Array.isArray(interests)) {\r\n            return throwError({ message: \"Interests must be an array.\", res, status: 400 });\r\n        }\r\n\r\n        // Gender Validation\r\n        const validGenders = ['male', 'female'];\r\n        if (!validGenders.includes(gender)) {\r\n            return throwError({ message: \"Gender must be either 'male' or 'female'.\", res, status: 400});\r\n        }\r\n\r\n        // Birthday Validation\r\n        if (isNaN(new Date(birthday).getTime())) {\r\n            return throwError({ message: \"Invalid birthday format.\", res, status: 400 });\r\n        }\r\n\r\n        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/;\r\n        if (!passwordRegex.test(password)) {\r\n            return throwError({\r\n                message: \"Password must be at least 8 characters long, include an uppercase letter, lowercase letter, a number, and a special character.\",\r\n                res,\r\n                status: 400\r\n            });\r\n        }\r\n\r\n        const hashedPassword = await bcrypt.hash(password, 12);\r\n\r\n\r\n         // Family Assignment\r\n         let family = await Family.findOne({ email });\r\n\r\n         if (!family) {\r\n            family = new Family({\r\n                familyName: familyName,\r\n                email,\r\n                familyAvatar: familyAvatar,\r\n                members: [],\r\n                createdAt: new Date()\r\n            });\r\n            await family.save();\r\n        }\r\n        else{\r\n            if (family.familyName !== familyName){\r\n                return throwError({ message: \"Wrong family name\", res, status: 400 })\r\n            }\r\n        }\r\n\r\n        // Check if a family member with the same name already exists\r\n        const existingFamilyMember = await User.findOne({ name, familyId: family._id });\r\n        if (existingFamilyMember) {\r\n            return throwError({ message: \"A member with this name already exists in the family.\", res, status: 400 });\r\n        }\r\n\r\n        // Create the user and link to family\r\n        const newUser = await User.create({...data, password: hashedPassword, familyId: family._id}); \r\n\r\n        // Add user to the family members list if not already present\r\n        if (!family.members.includes(newUser.id)) {\r\n            family.members.push({_id: newUser.id, role, name, gender, avatar});\r\n            await family.save();\r\n        }\r\n\r\n\r\n        if (!JWT_SECRET_KEY) {\r\n            return throwError({ message: \"JWT_SECRET_KEY is not defined\", res, status: 500 });\r\n        }\r\n\r\n        const token = await jwt.sign({ userId: newUser.id, role: newUser.role  }, JWT_SECRET_KEY);\r\n\r\n        res.status(200).send({user: newUser, token: token, family: family});\r\n\r\n    }catch(error){\r\n        return throwError({ message: \"Something went wrong while registering.\", res, status: 500});\r\n    }\r\n}  \r\n\r\n// forget password API\r\nexport const forgetPassword = async (req: Request, res: Response) : Promise<void> => {\r\n    try {\r\n        const { name, email } = req.body;\r\n        const user = await User.findOne({ email, name });\r\n\r\n        if (!user) {\r\n            return throwError({ message: \"Invalid credentials. User not found.\", res, status: 404 });\r\n        }\r\n\r\n        const tempPassword = generateSecurePassword();\r\n        const hashedPassword = await bcrypt.hash(tempPassword, 12);\r\n\r\n        user.password = hashedPassword;\r\n        user.isTempPassword = true;\r\n        user.passwordChangedAt = new Date();\r\n        await user.save();\r\n\r\n\r\n        const from: string = `\"Guardian Grove\" <${process.env.EMAIL_USERNAME}>`;\r\n        const to: string = email;\r\n        const subject: string = \"Your Temporary Password\";\r\n\r\n        const html: string = `\r\n            <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n                <h2 style=\"color: #2c3e50;\">Hello ${user.name},</h2>\r\n                <p>Your temporary password is: <strong>${tempPassword}</strong></p>\r\n                <p>This password will expire in 1 hour.</p>\r\n                <p>Please use this to login and change your password immediately.</p>\r\n                <br/>\r\n                <p>Thank you,</p>\r\n                <p><strong>Guardian Grove Team</strong></p>\r\n            </div>\r\n        `\r\n\r\n        // Send email with the temporary password\r\n        await sendMail(from, to, subject, html);\r\n\r\n        res.status(200).send({ message: \"Temporary password sent to your email.\" });\r\n\r\n    } catch (error) {\r\n        return throwError({ message: \"Error sending temporary password.\", res, status: 500});\r\n    }\r\n}"],"names":["forgetPassword","login","register","dotenv","config","JWT_SECRET_KEY","process","env","JWT_SECRET","req","res","name","email","password","body","throwError","message","status","user","User","findOne","isMatch","bcrypt","compare","token","jwt","sign","userId","id","role","json","requiresPasswordChange","isTempPassword","error","data","confirmPassword","birthday","gender","avatar","interests","familyName","familyAvatar","emailRegex","test","validRoles","includes","Array","isArray","validGenders","isNaN","Date","getTime","passwordRegex","hashedPassword","hash","family","Family","members","createdAt","save","existingFamilyMember","familyId","_id","newUser","create","push","send","tempPassword","generateSecurePassword","passwordChangedAt","from","EMAIL_USERNAME","to","subject","html","sendMail"],"mappings":"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"}